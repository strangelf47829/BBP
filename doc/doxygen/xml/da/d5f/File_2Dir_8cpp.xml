<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="da/d5f/File_2Dir_8cpp" kind="file" language="C++">
    <compoundname>File/Dir.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">#include<sp/>&quot;../include/FileSys.h&quot;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">BBP::std::DIRECTORY<sp/>&amp;BBP::std::DIRECTORY::root()</highlight></codeline>
<codeline lineno="5"><highlight class="comment">{</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Navigate<sp/>to<sp/>root</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>info(this-&gt;volume-&gt;path.data);</highlight></codeline>
<codeline lineno="8"><highlight class="comment">}</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">void<sp/>BBP::std::DIRECTORY::hold(std::conststring<sp/>path)</highlight></codeline>
<codeline lineno="11"><highlight class="comment">{</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Copy<sp/>string<sp/>into<sp/>file<sp/>descriptor<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>std::size_t<sp/>nameLength<sp/>=<sp/>std::strlen(path);</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>this-&gt;DirectoryDescriptor.path<sp/>=<sp/>std::string(nameLength<sp/>+<sp/>1,<sp/>(std::string_element<sp/>*)std::progmem.calloc(nameLength<sp/>+<sp/>1,<sp/>sizeof(std::string_element)));</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>std::strcpy(&amp;this-&gt;DirectoryDescriptor.path,<sp/>path);</highlight></codeline>
<codeline lineno="16"><highlight class="comment">}</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">BBP::std::DIRECTORY<sp/>&amp;BBP::std::DIRECTORY::info(std::conststring<sp/>path)</highlight></codeline>
<codeline lineno="19"><highlight class="comment">{</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>hold(path);</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>info();</highlight></codeline>
<codeline lineno="22"><highlight class="comment">}</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">void<sp/>BBP::std::DIRECTORY::close()</highlight></codeline>
<codeline lineno="25"><highlight class="comment">{</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Free<sp/>path<sp/>name<sp/>if<sp/>it<sp/>exists</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(this-&gt;DirectoryDescriptor.path.data)</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BBP::std::progmem.free(this-&gt;DirectoryDescriptor.path.data);</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>not<sp/>populated,<sp/>just<sp/>return</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!this-&gt;is_populated)</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Close<sp/>any<sp/>files</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(std::index_t<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>this-&gt;DirectoryDescriptor.fileCount;<sp/>index++)</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;DirectoryDescriptor.files.data[index].close();</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Close<sp/>any<sp/>directories</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(std::index_t<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>this-&gt;DirectoryDescriptor.directoryCount;<sp/>index++)</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;DirectoryDescriptor.directories.data[index].close();</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Close<sp/>file<sp/>and<sp/>directory<sp/>stack</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>BBP::std::progmem.free(this-&gt;DirectoryDescriptor.directories.data);</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>BBP::std::progmem.free(this-&gt;DirectoryDescriptor.files.data);</highlight></codeline>
<codeline lineno="45"><highlight class="comment">}</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">void<sp/>BBP::std::DIRECTORY::addVirtualFile(std::conststring<sp/>str,<sp/>std::PAGE&lt;std::mem_t&gt;<sp/>page)</highlight></codeline>
<codeline lineno="48"><highlight class="comment">{</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>buffer</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>FILE<sp/>*newBuffer<sp/>=<sp/>(FILE<sp/>*)std::progmem.calloc(DirectoryDescriptor.fileCount<sp/>+<sp/>1,<sp/>sizeof(FILE));</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Copy<sp/>memory</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(index_t<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>DirectoryDescriptor.fileCount;<sp/>index++)</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newBuffer[index]<sp/>=<sp/>DirectoryDescriptor.files.data[index];</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Free<sp/>buffer<sp/>and<sp/>overwrite<sp/>old<sp/>buffer</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>BBP::std::progmem.free(DirectoryDescriptor.files.data);</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>DirectoryDescriptor.files.data<sp/>=<sp/>newBuffer;</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Make<sp/>new<sp/>file</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/>DirectoryDescriptor.files.data[DirectoryDescriptor.fileCount]<sp/>=<sp/>std::FILE();</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>DirectoryDescriptor.files.data[DirectoryDescriptor.fileCount].FileDescriptor.Vector<sp/>=<sp/>page;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>DirectoryDescriptor.files.data[DirectoryDescriptor.fileCount].FileDescriptor.BlockCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>DirectoryDescriptor.files.data[DirectoryDescriptor.fileCount].FileDescriptor.BlockSize<sp/>=<sp/>std::seqlen(&amp;page);</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>DirectoryDescriptor.files.data[DirectoryDescriptor.fileCount].FileDescriptor.fileSize<sp/>=<sp/>DirectoryDescriptor.files.data[DirectoryDescriptor.fileCount].FileDescriptor.BlockSize;</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>DirectoryDescriptor.files.data[DirectoryDescriptor.fileCount].is_virt<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Increase<sp/>file<sp/>count<sp/>by<sp/>one</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>DirectoryDescriptor.fileCount++;</highlight></codeline>
<codeline lineno="70"><highlight class="comment">}</highlight></codeline>
<codeline lineno="71"><highlight class="comment">*/</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/File/Dir.cpp"/>
  </compounddef>
</doxygen>
