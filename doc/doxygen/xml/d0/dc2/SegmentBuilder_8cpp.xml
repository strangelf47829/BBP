<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="d0/dc2/SegmentBuilder_8cpp" kind="file" language="C++">
    <compoundname>SegmentBuilder.cpp</compoundname>
    <includes refid="db/de5/ELF_8h" local="yes">../include/ELF.h</includes>
    <includes refid="d0/def/Signal_8h" local="yes">../include/Signal.h</includes>
    <incdepgraph>
      <node id="3">
        <label>Memory.h</label>
        <link refid="de/d5c/Memory_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>SegmentBuilder.cpp</label>
        <link refid="d0/dc2/SegmentBuilder_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Strings.h</label>
        <link refid="de/d53/Strings_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Resources.h</label>
        <link refid="d0/d33/Resources_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ELF32.h</label>
        <link refid="d1/d5d/ELF32_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Stack.hxx</label>
        <link refid="db/d61/Stack_8hxx"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Memory.hxx</label>
        <link refid="d5/d4e/Memory_8hxx"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>errno.h</label>
        <link refid="d8/dc2/errno_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Signal.h</label>
        <link refid="d0/def/Signal_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Except.h</label>
        <link refid="dc/d88/Except_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdint.h</label>
        <link refid="df/dd8/stdint_8h"/>
      </node>
      <node id="4">
        <label>stddef.h</label>
        <link refid="d3/dce/stddef_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../include/ELF.h</label>
        <link refid="db/de5/ELF_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Stack.h</label>
        <link refid="dc/db6/Stack_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/ELF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/Signal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1aaa84a5b985f90c569a9ddc1107aa6ddd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1aaa84a5b985f90c569a9ddc1107aa6ddd" kindref="member">BBP::std::ELF::SegmentBuilder::Append</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>size)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>builder<sp/>is<sp/>null,<sp/>signal<sp/>SIGSEV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a179a55ddbd012adaea9285db57515cb7" kindref="member">elf</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/def/Signal_8h_1a82e69d819748cab5933309bba1999f7c" kindref="member">__SIGNAL__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a8b214d5bdfe950ea0efc262c569ff9ef" kindref="member">SIGSEGV</ref>);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>length<sp/>of<sp/>elf<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>currentLength<sp/>=<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a3f8c5c3d25a021fbc386bafabc41a719" kindref="member">std::seqlen</ref>(<ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a179a55ddbd012adaea9285db57515cb7" kindref="member">elf</ref>-&gt;<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ae617b962ff1bbb33b4436c0131fc9266" kindref="member">file</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>offset<sp/>and<sp/>size<sp/>to<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1ab15b446096d2d6d300b8d6abe0f411d0" kindref="member">offset</ref>(currentLength);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a9e0b6a8199ebabfdf4df50b1290d7724" kindref="member">filesz</ref>(size);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1afe038c1d119433cf3aec5bfb8849c4c7" kindref="member">memsz</ref>(size);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>create<sp/>a<sp/>new<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1afd78ff9334cd42ef8e180ce2266ce800" kindref="member">data</ref><sp/>=<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1afb582024987be6020cff7542cd771ae7" kindref="member">std::string</ref>(size,<sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">std::string_element</ref><sp/>*)<ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a179a55ddbd012adaea9285db57515cb7" kindref="member">elf</ref>-&gt;<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1a4fe482a030ea03542f9e36c2f680b3ca" kindref="member">allocator</ref>-&gt;<ref refid="d6/d73/classBBP_1_1std_1_1ResourceManager_1a2feb265bae9a30994a2a4a4f69306329" kindref="member">calloc</ref>(size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">std::string_element</ref>)));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a0fafd62fba3ce5d3234c2bcb4d1fd597" kindref="member">isMemUnique</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>set<sp/>the<sp/>stack<sp/>to<sp/>that<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a443c8ee7d72534b5b9c7c878a172a34b" kindref="member">stack</ref><sp/>=<sp/><ref refid="de/d21/classBBP_1_1std_1_1Stack" kindref="compound">std::Stack&lt;string_element&gt;</ref>(&amp;<ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1afd78ff9334cd42ef8e180ce2266ce800" kindref="member">data</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>append<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a370f972c44b9f597cdda3e119899f60f" kindref="member">std::last</ref>(<ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a179a55ddbd012adaea9285db57515cb7" kindref="member">elf</ref>-&gt;<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ae617b962ff1bbb33b4436c0131fc9266" kindref="member">file</ref>).nextPage<sp/>=<sp/>&amp;<ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1afd78ff9334cd42ef8e180ce2266ce800" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a1fb2cb860513ff4521f8bb295ebc78c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d8/d33/classBBP_1_1std_1_1ELF_1_1SegmentBuilder_1a1fb2cb860513ff4521f8bb295ebc78c1" kindref="member">BBP::std::ELF::SegmentBuilder::close</ref>()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>builder<sp/>is<sp/>null,<sp/>signal<sp/>SIGSEV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elf<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/def/Signal_8h_1a82e69d819748cab5933309bba1999f7c" kindref="member">__SIGNAL__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a8b214d5bdfe950ea0efc262c569ff9ef" kindref="member">SIGSEGV</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>mem<sp/>is<sp/>unique,<sp/>free<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMemUnique)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elf-&gt;allocator-&gt;free(data.data);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/ELF/SegmentBuilder.cpp"/>
  </compounddef>
</doxygen>
