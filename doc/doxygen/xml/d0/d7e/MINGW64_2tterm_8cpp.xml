<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="d0/d7e/MINGW64_2tterm_8cpp" kind="file" language="C++">
    <compoundname>MINGW64/tterm.cpp</compoundname>
    <includes refid="d6/dd1/stdio_8h" local="yes">../include/stdio.h</includes>
    <includes refid="d2/dd1/Graphics_8h" local="yes">../include/Graphics.h</includes>
    <includes refid="d2/d4f/OS_8h" local="yes">../include/OS.h</includes>
    <includes local="yes">../../build/include/SDL.h</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">thread</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fcntl.h</includes>
    <incdepgraph>
      <node id="4">
        <label>Memory.h</label>
        <link refid="de/d5c/Memory_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tterm.cpp</label>
        <link refid="d0/d7e/MINGW64_2tterm_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Strings.h</label>
        <link refid="de/d53/Strings_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Resources.h</label>
        <link refid="d0/d33/Resources_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>fcntl.h</label>
      </node>
      <node id="11">
        <label>Stack.hxx</label>
        <link refid="db/d61/Stack_8hxx"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Memory.hxx</label>
        <link refid="d5/d4e/Memory_8hxx"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>../include/OS.h</label>
        <link refid="d2/d4f/OS_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>FileSys.h</label>
        <link refid="d0/d00/FileSys_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>../include/Graphics.h</label>
        <link refid="d2/dd1/Graphics_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../include/stdio.h</label>
        <link refid="d6/dd1/stdio_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>errno.h</label>
        <link refid="d8/dc2/errno_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cstdio</label>
      </node>
      <node id="12">
        <label>Signal.h</label>
        <link refid="d0/def/Signal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Except.h</label>
        <link refid="dc/d88/Except_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="17">
        <label>../../build/include/SDL.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
        <link refid="df/dd8/stdint_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
        <link refid="d3/dce/stddef_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>thread</label>
      </node>
      <node id="10">
        <label>Stack.h</label>
        <link refid="dc/db6/Stack_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d0/d7e/MINGW64_2tterm_8cpp_1acf12fd02d718d8c4907145316b1063aa" prot="public" static="no" mutable="no">
        <type>SDL_Thread *</type>
        <definition>SDL_Thread* thr</definition>
        <argsstring></argsstring>
        <name>thr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/env_MINGW64/tterm.cpp" line="79" column="12" bodyfile="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/env_MINGW64/tterm.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d7e/MINGW64_2tterm_8cpp_1ae1fd54bdbfbc12c29816883afaa80969" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>volatile bool listenForInput</definition>
        <argsstring></argsstring>
        <name>listenForInput</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/env_MINGW64/tterm.cpp" line="80" column="15" bodyfile="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/env_MINGW64/tterm.cpp" bodystart="80" bodyend="-1"/>
        <referencedby refid="d0/d7e/MINGW64_2tterm_8cpp_1a6f762346f9b3ee9e4887d897b256eb80" compoundref="d0/d7e/MINGW64_2tterm_8cpp" startline="82" endline="95">inputThread</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d7e/MINGW64_2tterm_8cpp_1a6f762346f9b3ee9e4887d897b256eb80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inputThread</definition>
        <argsstring>(void *data)</argsstring>
        <name>inputThread</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/env_MINGW64/tterm.cpp" line="82" column="5" bodyfile="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/env_MINGW64/tterm.cpp" bodystart="82" bodyend="95"/>
        <references refid="d0/d7e/MINGW64_2tterm_8cpp_1ae1fd54bdbfbc12c29816883afaa80969" compoundref="d0/d7e/MINGW64_2tterm_8cpp" startline="80">listenForInput</references>
        <references refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" compoundref="d0/d6f/EMULATOR_2tterm_8cpp" startline="11" endline="27">BBP::std::printf</references>
        <references refid="dd/d98/namespaceBBP_1_1std_1a0e604b25e277316ba6a6d604812bbee3">BBP::std::STDIN</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/Graphics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/OS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../build/include/SDL.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" kindref="member">BBP::std::printf</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1ae95e98217b6c3191605f0d7dd5f483a9" kindref="member">std::conststring</ref><sp/>format,<sp/>...)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1afb582024987be6020cff7542cd771ae7" kindref="member">std::string</ref><sp/>buffer(<ref refid="dd/d98/namespaceBBP_1_1std_1a790bf7c69d24a27ebb26dfd83a8980fd" kindref="member">BBP::std::max_page_elements</ref>,<sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">BBP::std::string_element</ref><sp/>*)<ref refid="dd/d98/namespaceBBP_1_1std_1aa4b7f66aef4bb8963e9fec9370186362" kindref="member">BBP::std::activemem</ref>-&gt;calloc(<ref refid="dd/d98/namespaceBBP_1_1std_1a790bf7c69d24a27ebb26dfd83a8980fd" kindref="member">BBP::std::max_page_elements</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">BBP::std::string_element</ref>)));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>::vsprintf(buffer.data,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a66376ec3b30a50cc25df09f23fdd6733" kindref="member">std::STDOUT</ref><sp/>&lt;&lt;=<sp/>buffer;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>free<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1aa4b7f66aef4bb8963e9fec9370186362" kindref="member">BBP::std::activemem</ref>-&gt;<ref refid="d6/d73/classBBP_1_1std_1_1ResourceManager_1a88b2740fa8c5b5e30e6ef08cb8c7d883" kindref="member">free</ref>(buffer.data);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a6a109a05fa6ce27ce54f04a3d7f699d3" kindref="member">BBP::std::putf</ref>(std::Stack&lt;std::string_element&gt;<sp/>&amp;stream,<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1ae95e98217b6c3191605f0d7dd5f483a9" kindref="member">std::conststring</ref><sp/>format,<sp/>...)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1afb582024987be6020cff7542cd771ae7" kindref="member">std::string</ref><sp/>buffer(<ref refid="dd/d98/namespaceBBP_1_1std_1a790bf7c69d24a27ebb26dfd83a8980fd" kindref="member">BBP::std::max_page_elements</ref>,<sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">BBP::std::string_element</ref><sp/>*)<ref refid="dd/d98/namespaceBBP_1_1std_1aa4b7f66aef4bb8963e9fec9370186362" kindref="member">BBP::std::activemem</ref>-&gt;calloc(<ref refid="dd/d98/namespaceBBP_1_1std_1a790bf7c69d24a27ebb26dfd83a8980fd" kindref="member">BBP::std::max_page_elements</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">BBP::std::string_element</ref>)));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>::vsprintf(buffer.data,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;=<sp/>buffer;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>free<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1aa4b7f66aef4bb8963e9fec9370186362" kindref="member">BBP::std::activemem</ref>-&gt;<ref refid="d6/d73/classBBP_1_1std_1_1ResourceManager_1a88b2740fa8c5b5e30e6ef08cb8c7d883" kindref="member">free</ref>(buffer.data);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a5fda7007803371f4c5e6050dc0625420" kindref="member">BBP::std::sprintf</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a95c149a6e963e567bd059eb11aef4ac8" kindref="member">std::c_string</ref><sp/>buffer,<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1ae95e98217b6c3191605f0d7dd5f483a9" kindref="member">std::conststring</ref><sp/>format,<sp/>...)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::vsprintf(buffer,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1aacd39619cb9601c160fd4df069d49ee9" kindref="member">BBP::std::print_to_terminal</ref>(std::Stack&lt;std::string_element&gt;<sp/>*stack)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a95c149a6e963e567bd059eb11aef4ac8" kindref="member">BBP::std::c_string</ref><sp/>str;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>*stack<sp/>&gt;&gt;=<sp/>&amp;str;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>string<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>strLength<sp/>=<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a05512e3a63e13122046db97314f58591" kindref="member">std::strlen</ref>(str);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>string<sp/>using<sp/>R2D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a0d9f6105cb70d5bbf4ea7a9c5f317b18" kindref="member">gINIT</ref>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/da1/namespaceBBP_1_1std_1_1R2D_1ada5f0bdbe4d4bd6f1a3780235a34225a" kindref="member">BBP::std::R2D::print</ref>(&amp;<ref refid="dd/d98/namespaceBBP_1_1std_1aa3c0f7be0e430e039686fe4f39671dda" kindref="member">BBP::std::kernelDisplay</ref>,<sp/>str);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/db7/namespaceBBP_1_1std_1_1Driver_1af890afe53347748ccc3240bab4225a98" kindref="member">BBP::std::Driver::drawWindow</ref>(&amp;<ref refid="dd/d98/namespaceBBP_1_1std_1aa3c0f7be0e430e039686fe4f39671dda" kindref="member">BBP::std::kernelDisplay</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfe/namespaceBBP_1_1userspace_1a61a881cf9970daa1511345a803c18049aeb09bbca61c392f16c3f078bcf0abcd9" kindref="member">else</ref></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="de/dfe/namespaceBBP_1_1userspace_1a61a881cf9970daa1511345a803c18049aeb09bbca61c392f16c3f078bcf0abcd9" kindref="member">		::write</ref>(STDOUT_FILENO,<sp/>str,<sp/>strLength);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;printf&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//::write(STDOUT_FILENO,<sp/>str,<sp/>strLength);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="d0/d7e/MINGW64_2tterm_8cpp_1acf12fd02d718d8c4907145316b1063aa" refkind="member"><highlight class="normal">SDL_Thread<sp/>*<ref refid="d0/d7e/MINGW64_2tterm_8cpp_1acf12fd02d718d8c4907145316b1063aa" kindref="member">thr</ref>;</highlight></codeline>
<codeline lineno="80" refid="d0/d7e/MINGW64_2tterm_8cpp_1ae1fd54bdbfbc12c29816883afaa80969" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/d7e/MINGW64_2tterm_8cpp_1ae1fd54bdbfbc12c29816883afaa80969" kindref="member">listenForInput</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="d0/d7e/MINGW64_2tterm_8cpp_1a6f762346f9b3ee9e4887d897b256eb80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/d7e/MINGW64_2tterm_8cpp_1a6f762346f9b3ee9e4887d897b256eb80" kindref="member">inputThread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Event<sp/>event;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="d0/d7e/MINGW64_2tterm_8cpp_1ae1fd54bdbfbc12c29816883afaa80969" kindref="member">listenForInput</ref>)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(SDL_PollEvent(&amp;event))<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" kindref="member">::std::printf</ref>(</highlight><highlight class="stringliteral">&quot;Hello!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.type<sp/>==<sp/>SDL_KEYDOWN)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Keycode<sp/>keyCode<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.key.keysym.sym;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a0e604b25e277316ba6a6d604812bbee3" kindref="member">BBP::std::STDIN</ref><sp/>&lt;&lt;<sp/>(char)keyCode;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1afd8f9cf4a159c7b6d0c6e82da35f2561" kindref="member">BBP::std::captureInput</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d7e/MINGW64_2tterm_8cpp_1ae1fd54bdbfbc12c29816883afaa80969" kindref="member">listenForInput</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d7e/MINGW64_2tterm_8cpp_1acf12fd02d718d8c4907145316b1063aa" kindref="member">thr</ref><sp/>=<sp/>SDL_CreateThread(<ref refid="d0/d7e/MINGW64_2tterm_8cpp_1a6f762346f9b3ee9e4887d897b256eb80" kindref="member">inputThread</ref>,<sp/></highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8ac22bbb922d0cc3f48d445afed09351" kindref="member">BBP::std::stopCapturingInput</ref>()</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d7e/MINGW64_2tterm_8cpp_1ae1fd54bdbfbc12c29816883afaa80969" kindref="member">listenForInput</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_WaitThread(<ref refid="d0/d7e/MINGW64_2tterm_8cpp_1acf12fd02d718d8c4907145316b1063aa" kindref="member">thr</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a205f9c52fb5cea0f3c8a6fcc3c81b286" kindref="member">BBP::std::getC</ref>()</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Event<sp/>event;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_PollEvent(&amp;event))</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.type<sp/>==<sp/>SDL_KEYDOWN)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Keycode<sp/>keyCode<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.key.keysym.sym;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a0e604b25e277316ba6a6d604812bbee3" kindref="member">BBP::std::STDIN</ref><sp/>&lt;&lt;<sp/>(char)keyCode;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)keyCode;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="126"><highlight class="comment">#include<sp/>&lt;cstdio&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="comment">#include<sp/>&lt;thread&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="comment">#include<sp/>&lt;termios.h&gt;</highlight></codeline>
<codeline lineno="129"><highlight class="comment">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="comment">#include<sp/>&lt;unistd.h&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="comment">#include<sp/>&lt;fcntl.h&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment">void<sp/>BBP::std::print_to_terminal(std::Stack&lt;std::string_element&gt;<sp/>*stack)</highlight></codeline>
<codeline lineno="135"><highlight class="comment">{</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Declare<sp/>string</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/>BBP::std::c_string<sp/>str;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Read<sp/>string</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>*stack<sp/>&gt;&gt;=<sp/>&amp;str;</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Read<sp/>string<sp/>length</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>std::size_t<sp/>strLength<sp/>=<sp/>std::strlen(str);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>&apos;printf&apos;</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/>::write(STDOUT_FILENO,<sp/>str,<sp/>strLength);</highlight></codeline>
<codeline lineno="147"><highlight class="comment">}</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">::std::thread<sp/>inpThread;</highlight></codeline>
<codeline lineno="150"><highlight class="comment">volatile<sp/>bool<sp/>captureUserInput<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="151"><highlight class="comment">struct<sp/>termios<sp/>originalTermios;</highlight></codeline>
<codeline lineno="152"><highlight class="comment">struct<sp/>termios<sp/>rawTermios;</highlight></codeline>
<codeline lineno="153"><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">void<sp/>saveTerminalState()</highlight></codeline>
<codeline lineno="155"><highlight class="comment">{</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>the<sp/>current<sp/>terminal<sp/>settings</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/>tcgetattr(STDIN_FILENO,<sp/>&amp;originalTermios);</highlight></codeline>
<codeline lineno="159"><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>terminal<sp/>to<sp/>raw<sp/>mode</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>rawTermios<sp/>=<sp/>originalTermios;</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/>rawTermios.c_lflag<sp/>&amp;=<sp/>~(ICANON<sp/>|<sp/>ECHO);</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/>tcsetattr(STDIN_FILENO,<sp/>TCSANOW,<sp/>&amp;rawTermios);</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>non-blocking<sp/>mode<sp/>for<sp/>stdin</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>fcntl(STDIN_FILENO,<sp/>F_SETFL,<sp/>fcntl(STDIN_FILENO,<sp/>F_GETFL)<sp/>|<sp/>O_NONBLOCK);</highlight></codeline>
<codeline lineno="167"><highlight class="comment">}</highlight></codeline>
<codeline lineno="168"><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment">void<sp/>restoreTerminalState()</highlight></codeline>
<codeline lineno="170"><highlight class="comment">{</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>terminal<sp/>to<sp/>its<sp/>original<sp/>state</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/>tcsetattr(STDIN_FILENO,<sp/>TCSANOW,<sp/>&amp;originalTermios);</highlight></codeline>
<codeline lineno="173"><highlight class="comment">}</highlight></codeline>
<codeline lineno="174"><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">void<sp/>userInput_thread()</highlight></codeline>
<codeline lineno="176"><highlight class="comment">{</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/>while<sp/>(captureUserInput)</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read(STDIN_FILENO,<sp/>&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="182"><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!captureUserInput)</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(c<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline lineno="188"><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(c<sp/>==<sp/>0x10)</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>restoreTerminalState();</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(-999);</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BBP::std::STDIN<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="comment">}</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment">void<sp/>BBP::std::captureInput()</highlight></codeline>
<codeline lineno="200"><highlight class="comment">{</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>terminal<sp/>state</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/>saveTerminalState();</highlight></codeline>
<codeline lineno="203"><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>threads</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>inpThread<sp/>=<sp/>::std::thread(userInput_thread);</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Capture<sp/>user<sp/>input</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/>captureUserInput<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="209"><highlight class="comment">}</highlight></codeline>
<codeline lineno="210"><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment">void<sp/>BBP::std::stopCapturingInput()</highlight></codeline>
<codeline lineno="212"><highlight class="comment">{</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Stop<sp/>capturing<sp/>user<sp/>input</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/>captureUserInput<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="215"><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Join<sp/>the<sp/>thread</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/>inpThread.join();</highlight></codeline>
<codeline lineno="218"><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Restore<sp/>terminal<sp/>state</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/>restoreTerminalState();</highlight></codeline>
<codeline lineno="221"><highlight class="comment">}</highlight></codeline>
<codeline lineno="222"><highlight class="comment">*/</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/env_MINGW64/tterm.cpp"/>
  </compounddef>
</doxygen>
