<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="de/d02/BinaryExecutables_8cpp" kind="file" language="C++">
    <compoundname>BinaryExecutables.cpp</compoundname>
    <includes refid="d0/dcf/BinaryExecutable_8h" local="yes">../include/BinaryExecutable.h</includes>
    <includes refid="d6/dd1/stdio_8h" local="yes">../include/stdio.h</includes>
    <incdepgraph>
      <node id="4">
        <label>Memory.h</label>
        <link refid="de/d5c/Memory_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Strings.h</label>
        <link refid="de/d53/Strings_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Resources.h</label>
        <link refid="d0/d33/Resources_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ELF32.h</label>
        <link refid="d1/d5d/ELF32_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Stack.hxx</label>
        <link refid="db/d61/Stack_8hxx"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Memory.hxx</label>
        <link refid="d5/d4e/Memory_8hxx"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>../include/stdio.h</label>
        <link refid="d6/dd1/stdio_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>errno.h</label>
        <link refid="d8/dc2/errno_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Signal.h</label>
        <link refid="d0/def/Signal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Except.h</label>
        <link refid="dc/d88/Except_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdint.h</label>
        <link refid="df/dd8/stdint_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
        <link refid="d3/dce/stddef_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../include/BinaryExecutable.h</label>
        <link refid="d0/dcf/BinaryExecutable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>BinaryExecutables.cpp</label>
        <link refid="de/d02/BinaryExecutables_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ELF.h</label>
        <link refid="db/de5/ELF_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Stack.h</label>
        <link refid="dc/db6/Stack_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/BinaryExecutable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a2eea354e4d1578fe320884a693aaaea6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a2eea354e4d1578fe320884a693aaaea6" kindref="member">BBP::userspace::BinaryExecutable::loadExecutable</ref>(<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder" kindref="compound">std::ELF::ELFBuilder</ref><sp/>&amp;binary,<sp/><ref refid="d6/d73/classBBP_1_1std_1_1ResourceManager" kindref="compound">std::ResourceManager</ref><sp/>*allocator)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>allocator<sp/>is<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a7aea680298a0a52637bb8d96bd56e50d" kindref="member">allocator</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a750ba4c285e0788e84722a30a776b913" kindref="member">std::exception</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>load<sp/>binary:<sp/>Allocator<sp/>invalid.&quot;</highlight><highlight class="normal">,<sp/><ref refid="d8/dc2/errno_8h_1a0030614bc864d1b24eaedd71585acc27" kindref="member">ENODATA</ref>);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;allocator<sp/>=<sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a7aea680298a0a52637bb8d96bd56e50d" kindref="member">allocator</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>track<sp/>of<sp/>the<sp/>physical<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>BinaryPhysicalSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>TLSSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>loadedSegment<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>each<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>segment<sp/>=<sp/>0;<sp/>segment<sp/>&lt;<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>.max_elements;<sp/>segment++)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>segment<sp/>is<sp/>not<sp/>of<sp/>type<sp/>&apos;load&apos;,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].type()<sp/>!=<sp/><ref refid="d9/d86/namespaceBBP_1_1std_1_1ELF_1ac724b0f41a81caa3f2950886d087dee9a98a1bd0faaa182fa419db5ed4a2e1a09" kindref="member">std::ELF::PT_LOAD</ref><sp/>&amp;&amp;<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].type()<sp/>!=<sp/><ref refid="d9/d86/namespaceBBP_1_1std_1_1ELF_1ac724b0f41a81caa3f2950886d087dee9aa41f51d27471b57de855a2c37a3d11cb" kindref="member">std::ELF::PT_TLS</ref>)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>physical<sp/>and<sp/>virtual<sp/>memory<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>physicalSize<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].filesz();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>virtualSize<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].memsz();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>ending<sp/>address<sp/>of<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>actualSize<sp/>=<sp/>((physicalSize<sp/>&gt;<sp/>virtualSize)<sp/>?<sp/>physicalSize<sp/>:<sp/>virtualSize);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>segmentEndsAt<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].paddr()<sp/>+<sp/>actualSize;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>segment<sp/>ends<sp/>at<sp/>address<sp/>greater<sp/>than<sp/>physical<sp/>size,<sp/>increase<sp/>physical<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segmentEndsAt<sp/>&gt;<sp/>BinaryPhysicalSize<sp/>&amp;&amp;<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].type()<sp/>==<sp/><ref refid="d9/d86/namespaceBBP_1_1std_1_1ELF_1ac724b0f41a81caa3f2950886d087dee9a98a1bd0faaa182fa419db5ed4a2e1a09" kindref="member">std::ELF::PT_LOAD</ref>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryPhysicalSize<sp/>+=<sp/>actualSize;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segmentEndsAt<sp/>&gt;<sp/>BinaryPhysicalSize<sp/>&amp;&amp;<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].type()<sp/>==<sp/><ref refid="d9/d86/namespaceBBP_1_1std_1_1ELF_1ac724b0f41a81caa3f2950886d087dee9aa41f51d27471b57de855a2c37a3d11cb" kindref="member">std::ELF::PT_TLS</ref>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLSSize<sp/>+=<sp/>actualSize;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>are<sp/>here<sp/>anyway,<sp/>set<sp/>segment<sp/>data<sp/>head<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a4e9ead370dc435afc1dabb9a0e800dd9" kindref="member">mapping</ref>.static_data[loadedSegment].physicalMemoryHead<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].paddr();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a4e9ead370dc435afc1dabb9a0e800dd9" kindref="member">mapping</ref>.static_data[loadedSegment].virtualMemoryHead<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].vaddr();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>set<sp/>size<sp/>and<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1ae104641b17c021a901add93f7bc5d808" kindref="member">std::word</ref><sp/>flag<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].flags();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a4e9ead370dc435afc1dabb9a0e800dd9" kindref="member">mapping</ref>.static_data[loadedSegment].readable<sp/>=<sp/>flag<sp/>&amp;<sp/>0b100;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a4e9ead370dc435afc1dabb9a0e800dd9" kindref="member">mapping</ref>.static_data[loadedSegment].writeable<sp/>=<sp/>flag<sp/>&amp;<sp/>0b010;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a4e9ead370dc435afc1dabb9a0e800dd9" kindref="member">mapping</ref>.static_data[loadedSegment].executable<sp/>=<sp/>flag<sp/>&amp;<sp/>0b001;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a4e9ead370dc435afc1dabb9a0e800dd9" kindref="member">mapping</ref>.static_data[loadedSegment].allocated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a4e9ead370dc435afc1dabb9a0e800dd9" kindref="member">mapping</ref>.static_data[loadedSegment].size<sp/>=<sp/>actualSize;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>loaded<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadedSegment++;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a069910ce9f3d2bdf7580e55eec85c62f" kindref="member">totalSize</ref><sp/>=<sp/>BinaryPhysicalSize<sp/>+<sp/>TLSSize;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>specified<sp/>amount<sp/>of<sp/>bytes<sp/>into<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ab75ab6cf2c312ecb34fe62562936ce67" kindref="member">BinaryData</ref><sp/>=<sp/><ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::PAGE&lt;std::string_element&gt;</ref>(BinaryPhysicalSize,<sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">std::string_element</ref>*)<ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a7aea680298a0a52637bb8d96bd56e50d" kindref="member">allocator</ref>-&gt;<ref refid="d6/d73/classBBP_1_1std_1_1ResourceManager_1a2feb265bae9a30994a2a4a4f69306329" kindref="member">calloc</ref>(BinaryPhysicalSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">std::string_element</ref>)));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ae4efaa5ede25b5ff9ada504ca5f87f6f" kindref="member">TLSData</ref><sp/>=<sp/><ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::PAGE&lt;std::string_element&gt;</ref>(TLSSize,<sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">std::string_element</ref><sp/>*)<ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a7aea680298a0a52637bb8d96bd56e50d" kindref="member">allocator</ref>-&gt;<ref refid="d6/d73/classBBP_1_1std_1_1ResourceManager_1a2feb265bae9a30994a2a4a4f69306329" kindref="member">calloc</ref>(TLSSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">std::string_element</ref>)));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ae215ff73f42ca9f57046c5d3ef5a8476" kindref="member">allocated</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Link<sp/>TLS<sp/>data<sp/>and<sp/>Binary<sp/>Data<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ab75ab6cf2c312ecb34fe62562936ce67" kindref="member">BinaryData</ref>.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1a8d21ebf8bb4b9485b67e17698ff1f890" kindref="member">nextPage</ref><sp/>=<sp/>&amp;<ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ae4efaa5ede25b5ff9ada504ca5f87f6f" kindref="member">TLSData</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ae4efaa5ede25b5ff9ada504ca5f87f6f" kindref="member">TLSData</ref>.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1ae3ed5c6be788a903036a151ac69cd2d9" kindref="member">prevPage</ref><sp/>=<sp/>&amp;<ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ab75ab6cf2c312ecb34fe62562936ce67" kindref="member">BinaryData</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>loop<sp/>over<sp/>each<sp/>segment<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>segment<sp/>=<sp/>0;<sp/>segment<sp/>&lt;<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>.max_elements;<sp/>segment++)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>segment<sp/>is<sp/>not<sp/>of<sp/>type<sp/>&apos;load&apos;,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].type()<sp/>!=<sp/><ref refid="d9/d86/namespaceBBP_1_1std_1_1ELF_1ac724b0f41a81caa3f2950886d087dee9a98a1bd0faaa182fa419db5ed4a2e1a09" kindref="member">std::ELF::PT_LOAD</ref><sp/>&amp;&amp;<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].type()<sp/>!=<sp/><ref refid="d9/d86/namespaceBBP_1_1std_1_1ELF_1ac724b0f41a81caa3f2950886d087dee9aa41f51d27471b57de855a2c37a3d11cb" kindref="member">std::ELF::PT_TLS</ref>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>physical<sp/>size,<sp/>and<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>physicalSegmentSize<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].filesz();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1aba0804f0534bca779731a6e8f2d3b123" kindref="member">std::offset_t</ref><sp/>segmentOffset<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].offset();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>loadIntoAddress<sp/>=<sp/>binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ac6d3e73a576cff32f9ff187656ecaef0" kindref="member">segments</ref>[segment].paddr();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>offset<sp/>is<sp/>0,<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segmentOffset<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>copy<sp/>binary<sp/>data<sp/>into<sp/>physical<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>physicalSegmentSize;<sp/>idx++)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dce/stddef_8h_1abe45653ace4e77c9ae4612de5535ff1d" kindref="member">__UNSAFE__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa63573041786d49b7cdb2eec8a921a6a" kindref="member">std::write</ref>)(&amp;<ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ab75ab6cf2c312ecb34fe62562936ce67" kindref="member">BinaryData</ref>,<sp/><ref refid="d3/dce/stddef_8h_1abe45653ace4e77c9ae4612de5535ff1d" kindref="member">__UNSAFE__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a1d232f50fc4e569e79449970f1b4bb9e" kindref="member">std::read</ref>)(&amp;binary.<ref refid="d3/d63/classBBP_1_1std_1_1ELF_1_1ELFBuilder_1ae617b962ff1bbb33b4436c0131fc9266" kindref="member">file</ref>,<sp/>segmentOffset<sp/>+<sp/>idx),<sp/>loadIntoAddress<sp/>+<sp/>idx);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a9d5e6d71b96e1ace8d45c87dedeab11f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a9d5e6d71b96e1ace8d45c87dedeab11f" kindref="member">BBP::userspace::BinaryExecutable::unloadExecutable</ref>()</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>binary<sp/>is<sp/>not<sp/>allocated,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocated<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>binary<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>allocator-&gt;free(BinaryData.data);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>allocator-&gt;free(TLSData.data);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryData<sp/>=<sp/><ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::PAGE&lt;std::string_element&gt;</ref>(0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>TLSData<sp/>=<sp/><ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::PAGE&lt;std::string_element&gt;</ref>(0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>allocated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>totalSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>each<sp/>segment<sp/>and<sp/>set<sp/>them<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>map<sp/>=<sp/>0;<sp/>map<sp/>&lt;<sp/>mapping.dataSize;<sp/>map++)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping.static_data[map]<sp/>=<sp/><ref refid="d3/de6/structBBP_1_1userspace_1_1MemoryRegion" kindref="compound">MemoryRegion</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>allocator<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a2b295eba81c58863f4657eb94f0e2156" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">BBP::std::address_t</ref><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a96eb4539fc4f247710a8c1effabea87e" kindref="member">BBP::userspace::BinaryExecutable::virtualToPhysical</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>address,<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>cached)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>cached<sp/>index<sp/>is<sp/>out<sp/>of<sp/>static_data<sp/>index,<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached<sp/>&gt;=<sp/>mapping.dataSize)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a750ba4c285e0788e84722a30a776b913" kindref="member">std::exception</ref>(</highlight><highlight class="stringliteral">&quot;Virtual<sp/>memory<sp/>cache<sp/>index<sp/>invalid.&quot;</highlight><highlight class="normal">,<sp/><ref refid="d8/dc2/errno_8h_1a556612e55358838192165684c971a44f" kindref="member">EADDRNOTAVAIL</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>cached<sp/>block<sp/>contains<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping.static_data[cached].allocated<sp/>&amp;&amp;<sp/>mapping.static_data[cached].virtualMemoryHead<sp/>&lt;=<sp/>address<sp/>&amp;&amp;<sp/>(mapping.static_data[cached].virtualMemoryHead<sp/>+<sp/>mapping.static_data[cached].size)<sp/>&gt;<sp/>address)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>so,<sp/>find<sp/>difference<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1aba0804f0534bca779731a6e8f2d3b123" kindref="member">std::offset_t</ref><sp/>offset<sp/>=<sp/>address<sp/>-<sp/>mapping.static_data[cached].virtualMemoryHead;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapping.static_data[cached].physicalMemoryHead<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>just<sp/>return<sp/>virtual<sp/>to<sp/>physical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>virtualToPhysical(address);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1ac2eba49b57e0aa11e970173e097fccb7" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">BBP::std::address_t</ref><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1af46ca1c3ec18196e50f62e7bda446b6b" kindref="member">BBP::userspace::BinaryExecutable::physicalToVirtual</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>address,<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>cached)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>cached<sp/>index<sp/>is<sp/>out<sp/>of<sp/>static_data<sp/>index,<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached<sp/>&gt;=<sp/>mapping.dataSize)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a750ba4c285e0788e84722a30a776b913" kindref="member">std::exception</ref>(</highlight><highlight class="stringliteral">&quot;Physical<sp/>memory<sp/>cache<sp/>index<sp/>invalid.&quot;</highlight><highlight class="normal">,<sp/><ref refid="d8/dc2/errno_8h_1a556612e55358838192165684c971a44f" kindref="member">EADDRNOTAVAIL</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>cached<sp/>block<sp/>contains<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping.static_data[cached].allocated<sp/>&amp;&amp;<sp/>mapping.static_data[cached].physicalMemoryHead<sp/>&lt;=<sp/>address<sp/>&amp;&amp;<sp/>(mapping.static_data[cached].physicalMemoryHead<sp/>+<sp/>mapping.static_data[cached].size)<sp/>&gt;<sp/>address)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>so,<sp/>find<sp/>difference<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1aba0804f0534bca779731a6e8f2d3b123" kindref="member">std::offset_t</ref><sp/>offset<sp/>=<sp/>address<sp/>-<sp/>mapping.static_data[cached].physicalMemoryHead;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapping.static_data[cached].virtualMemoryHead<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>just<sp/>return<sp/>virtual<sp/>to<sp/>physical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>physicalToVirtual(address);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a96eb4539fc4f247710a8c1effabea87e" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">BBP::std::address_t</ref><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a96eb4539fc4f247710a8c1effabea87e" kindref="member">BBP::userspace::BinaryExecutable::virtualToPhysical</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>address)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>address<sp/>of<sp/>the<sp/>memory<sp/>mapping<sp/>for<sp/>this<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>block<sp/>=<sp/>findIndexOfVirtualMemory(address);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>address<sp/>is<sp/>found,<sp/>signal<sp/>SIGSEGV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>==<sp/>mapping.dataSize)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/def/Signal_8h_1a82e69d819748cab5933309bba1999f7c" kindref="member">__SIGNAL__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a8b214d5bdfe950ea0efc262c569ff9ef" kindref="member">SIGSEGV</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>virtualHead<sp/>=<sp/>mapping.static_data[block].virtualMemoryHead;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>physicalHead<sp/>=<sp/>mapping.static_data[block].physicalMemoryHead;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>block<sp/>found.<sp/>Now<sp/>find<sp/>difference<sp/>between<sp/>address<sp/>and<sp/>virtual<sp/>head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1aba0804f0534bca779731a6e8f2d3b123" kindref="member">std::offset_t</ref><sp/>difference<sp/>=<sp/>address<sp/>-<sp/>virtualHead;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>Add<sp/>that<sp/>difference<sp/>to<sp/>physical<sp/>head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>difference<sp/>+<sp/>physicalHead;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1af46ca1c3ec18196e50f62e7bda446b6b" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">BBP::std::address_t</ref><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1af46ca1c3ec18196e50f62e7bda446b6b" kindref="member">BBP::userspace::BinaryExecutable::physicalToVirtual</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>address)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>address<sp/>of<sp/>the<sp/>memory<sp/>mapping<sp/>for<sp/>this<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>block<sp/>=<sp/>findIndexOfPhysicalMemory(address);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>address<sp/>is<sp/>found,<sp/>signal<sp/>SIGSEGV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>==<sp/>mapping.dataSize)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/def/Signal_8h_1a82e69d819748cab5933309bba1999f7c" kindref="member">__SIGNAL__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a8b214d5bdfe950ea0efc262c569ff9ef" kindref="member">SIGSEGV</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>virtualHead<sp/>=<sp/>mapping.static_data[block].virtualMemoryHead;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>physicalHead<sp/>=<sp/>mapping.static_data[block].physicalMemoryHead;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>block<sp/>found.<sp/>Now<sp/>find<sp/>difference<sp/>between<sp/>address<sp/>and<sp/>virtual<sp/>head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1aba0804f0534bca779731a6e8f2d3b123" kindref="member">std::offset_t</ref><sp/>difference<sp/>=<sp/>address<sp/>-<sp/>physicalHead;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>Add<sp/>that<sp/>difference<sp/>to<sp/>physical<sp/>head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>difference<sp/>+<sp/>virtualHead;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1aa7c08493ef5b210b84ff067a5b6aeae2" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">BBP::std::index_t</ref><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1aa7c08493ef5b210b84ff067a5b6aeae2" kindref="member">BBP::userspace::BinaryExecutable::findIndexOfVirtualMemory</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>address)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>each<sp/>memory<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>block<sp/>=<sp/>0;<sp/>block<sp/>&lt;<sp/>mapping.dataSize;<sp/>block++)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>block<sp/>is<sp/>not<sp/>allocated,<sp/>continue<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping.static_data[block].allocated<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>virtualHead<sp/>=<sp/>mapping.static_data[block].virtualMemoryHead;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>virtualSize<sp/>=<sp/>mapping.static_data[block].size;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Physical<sp/>memory<sp/>address<sp/>is<sp/>found<sp/>if<sp/>address<sp/>is<sp/>within<sp/>virtual<sp/>memory<sp/>head<sp/>and<sp/>virtual<sp/>memory<sp/>head<sp/>+<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(virtualHead<sp/>&lt;=<sp/>address<sp/>&amp;&amp;<sp/>(virtualHead<sp/>+<sp/>virtualSize)<sp/>&gt;<sp/>address)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>None<sp/>found.<sp/>Return<sp/>block<sp/>count<sp/>to<sp/>indicate<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapping.dataSize;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1aec6ae6967b1f32362e7d4cc563cfab67" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">BBP::std::index_t</ref><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1aec6ae6967b1f32362e7d4cc563cfab67" kindref="member">BBP::userspace::BinaryExecutable::findIndexOfPhysicalMemory</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>address)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>each<sp/>memory<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>block<sp/>=<sp/>0;<sp/>block<sp/>&lt;<sp/>mapping.dataSize;<sp/>block++)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>block<sp/>is<sp/>not<sp/>allocated,<sp/>continue<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapping.static_data[block].allocated<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a03632bff3fd98378d63d18e829a72de1" kindref="member">std::address_t</ref><sp/>physicalHead<sp/>=<sp/>mapping.static_data[block].physicalMemoryHead;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>physicalSize<sp/>=<sp/>mapping.static_data[block].size;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Physical<sp/>memory<sp/>address<sp/>is<sp/>found<sp/>if<sp/>address<sp/>is<sp/>within<sp/>virtual<sp/>memory<sp/>head<sp/>and<sp/>virtual<sp/>memory<sp/>head<sp/>+<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(physicalHead<sp/>&lt;=<sp/>address<sp/>&amp;&amp;<sp/>(physicalHead<sp/>+<sp/>physicalSize)<sp/>&gt;<sp/>address)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>None<sp/>found.<sp/>Return<sp/>block<sp/>count<sp/>to<sp/>indicate<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapping.dataSize;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>TLS<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1af9382501257bd31fb11126a44007d18c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1af9382501257bd31fb11126a44007d18c" kindref="member">BBP::userspace::BinaryExecutable::createTLS</ref>(<ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::PAGE&lt;std::string_element&gt;</ref><sp/>&amp;page)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>binary<sp/>data<sp/>is<sp/>loaded,<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocated<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a750ba4c285e0788e84722a30a776b913" kindref="member">std::exception</ref>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>TLS<sp/>Data:<sp/>No<sp/>binary<sp/>loaded&quot;</highlight><highlight class="normal">,<sp/><ref refid="d8/dc2/errno_8h_1a0030614bc864d1b24eaedd71585acc27" kindref="member">ENODATA</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>page<sp/>=<sp/><ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::PAGE&lt;std::string_element&gt;</ref>(TLSData.dataSize,<sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">std::string_element</ref>*)allocator-&gt;calloc(TLSData.dataSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="dd/d98/namespaceBBP_1_1std_1aa4895fd7a0ffe3b69a98a63605dd421e" kindref="member">std::string_element</ref>)));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a997d77887946462f3e071f11465abfae" kindref="member">std::memcpy</ref>(TLSData,<sp/>page);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Swap<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a28be13bcd4204fcd3f95601b6c82a51b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a28be13bcd4204fcd3f95601b6c82a51b" kindref="member">BBP::userspace::BinaryExecutable::loadTLS</ref>(<ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::PAGE&lt;std::string_element&gt;</ref><sp/>&amp;page)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>page<sp/>next-prev<sp/>relation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>TLSData.prevPage<sp/>=<sp/>page.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1ae3ed5c6be788a903036a151ac69cd2d9" kindref="member">prevPage</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>TLSData.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1a8d21ebf8bb4b9485b67e17698ff1f890" kindref="member">nextPage</ref><sp/>=<sp/>page.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1a8d21ebf8bb4b9485b67e17698ff1f890" kindref="member">nextPage</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>set<sp/>binary<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryData.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1a8d21ebf8bb4b9485b67e17698ff1f890" kindref="member">nextPage</ref><sp/>=<sp/>&amp;page;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>page.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1ae3ed5c6be788a903036a151ac69cd2d9" kindref="member">prevPage</ref><sp/>=<sp/>&amp;BinaryData;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Swap<sp/>around<sp/>page<sp/>stuff<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a8e2d0b0de64b559b165176370cb37ec0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dc2/classBBP_1_1userspace_1_1BinaryExecutable_1a8e2d0b0de64b559b165176370cb37ec0" kindref="member">BBP::userspace::BinaryExecutable::unloadTLS</ref>(<ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::PAGE&lt;std::string_element&gt;</ref><sp/>&amp;page)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>page<sp/>next-prev<sp/>relation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>page.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1ae3ed5c6be788a903036a151ac69cd2d9" kindref="member">prevPage</ref><sp/>=<sp/>TLSData.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1ae3ed5c6be788a903036a151ac69cd2d9" kindref="member">prevPage</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>page.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1a8d21ebf8bb4b9485b67e17698ff1f890" kindref="member">nextPage</ref><sp/>=<sp/>TLSData.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1a8d21ebf8bb4b9485b67e17698ff1f890" kindref="member">nextPage</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>set<sp/>binary<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryData.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1a8d21ebf8bb4b9485b67e17698ff1f890" kindref="member">nextPage</ref><sp/>=<sp/>&amp;TLSData;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>TLSData.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1ae3ed5c6be788a903036a151ac69cd2d9" kindref="member">prevPage</ref><sp/>=<sp/>&amp;BinaryData;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/RAE/BinaryExecutables.cpp"/>
  </compounddef>
</doxygen>
