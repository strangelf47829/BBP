<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="de/dec/Auxiliary_8cpp" kind="file" language="C++">
    <compoundname>Auxiliary.cpp</compoundname>
    <includes refid="df/d71/ELSA_8h" local="yes">../include/ELSA.h</includes>
    <includes refid="d5/dfd/ELSABackend_8h" local="yes">../include/ELSABackend.h</includes>
    <includes refid="de/db3/Actions_8h" local="yes">Actions.h</includes>
    <incdepgraph>
      <node id="5">
        <label>Memory.h</label>
        <link refid="de/d5c/Memory_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ELSABackend.h</label>
        <link refid="d5/dfd/ELSABackend_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Auxiliary.cpp</label>
        <link refid="de/dec/Auxiliary_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Opcodes.h</label>
        <link refid="d1/d12/Opcodes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Strings.h</label>
        <link refid="de/d53/Strings_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Resources.h</label>
        <link refid="d0/d33/Resources_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ELF32.h</label>
        <link refid="d1/d5d/ELF32_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Stack.hxx</label>
        <link refid="db/d61/Stack_8hxx"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Memory.hxx</label>
        <link refid="d5/d4e/Memory_8hxx"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>FileSys.h</label>
        <link refid="d0/d00/FileSys_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Actions.h</label>
        <link refid="de/db3/Actions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>stdio.h</label>
        <link refid="d6/dd1/stdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>errno.h</label>
        <link refid="d8/dc2/errno_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Instructions.h</label>
        <link refid="d9/dd5/Instructions_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Signal.h</label>
        <link refid="d0/def/Signal_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Except.h</label>
        <link refid="dc/d88/Except_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Lex.h</label>
        <link refid="df/d80/Lex_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdint.h</label>
        <link refid="df/dd8/stdint_8h"/>
      </node>
      <node id="6">
        <label>stddef.h</label>
        <link refid="d3/dce/stddef_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ELF.h</label>
        <link refid="db/de5/ELF_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Stack.h</label>
        <link refid="dc/db6/Stack_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../include/ELSA.h</label>
        <link refid="df/d71/ELSA_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../include/ELSA.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/ELSABackend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/db3/Actions_8h" kindref="compound">Actions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1af4b6ff6fcde258840f428e3ea3493758" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1a2cc851baa19a0c196a426786332b7674" kindref="member">BBP::std::errno_t</ref><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1af4b6ff6fcde258840f428e3ea3493758" kindref="member">BBP::esa::esaProcessor::ExpectDelimiters</ref>(<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context" kindref="compound">std::Lexer::lex_context</ref><sp/>*context,<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>argc,<sp/><ref refid="d2/d65/namespaceBBP_1_1std_1_1Lexer_1ab09b4f6b0c27fd16d1ade7bab2b6c431" kindref="member">std::Lexer::lex_keywordhandle</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>argv[],<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>singleLine,<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>min,<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>maxDepth,<sp/><ref refid="d2/d65/namespaceBBP_1_1std_1_1Lexer_1ab09b4f6b0c27fd16d1ade7bab2b6c431" kindref="member">std::Lexer::lex_keywordhandle</ref><sp/>escape,<sp/><ref refid="d2/d65/namespaceBBP_1_1std_1_1Lexer_1ab09b4f6b0c27fd16d1ade7bab2b6c431" kindref="member">std::Lexer::lex_keywordhandle</ref><sp/>stop)</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>context<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1a3f317946e043623f9d6b93dbf60e6316" kindref="member">EFAULT</ref>;<sp/></highlight><highlight class="comment">//<sp/>Bad<sp/>context<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>argc<sp/>is<sp/>not<sp/>0,<sp/>check<sp/>if<sp/>argv<sp/>is<sp/>not<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>argv<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1a3f317946e043623f9d6b93dbf60e6316" kindref="member">EFAULT</ref>;<sp/></highlight><highlight class="comment">//<sp/>Bad<sp/>argv<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>argc<sp/>is<sp/>not<sp/>a<sp/>multiple<sp/>of<sp/>2,<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>%<sp/>2<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1a5fe247e079b591a68e0fdbf7caec5b70" kindref="member">EDOM</ref>;<sp/></highlight><highlight class="comment">//<sp/>EDOM<sp/>because<sp/>odd<sp/>numbers<sp/>are<sp/>not<sp/>within<sp/>the<sp/>domain<sp/>of<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>delimiter<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a33d506930eda899e38e79b7e530f43d4" kindref="member">delimiterStack</ref>.<ref refid="de/d21/classBBP_1_1std_1_1Stack_1a752abbe63aa4dc1f0e3f13cacd9feb20" kindref="member">atElement</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a76d39516f491fb0bd338c76d32ec5a34" kindref="member">delimiterDepth</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>index<sp/>of<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>start<sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ad41d8972ba6f4bb4561c0e9d5e005b34" kindref="member">atPosition</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref>.<ref refid="db/dca/structBBP_1_1std_1_1Lexer_1_1lex__debugInfo_1a660c9195a37abea01adae53a336071fa" kindref="member">highlight</ref><sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>variable<sp/>stores<sp/>the<sp/>&apos;depth&apos;<sp/>of<sp/>the<sp/>delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1ae104641b17c021a901add93f7bc5d808" kindref="member">std::word</ref><sp/>depth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Although<sp/>possible<sp/>through<sp/>the<sp/>stack<sp/>alone,<sp/>allocating<sp/>a<sp/>new<sp/>variable<sp/>optimizes<sp/>the<sp/>read<sp/>time<sp/>and<sp/>thus<sp/>the<sp/>speed<sp/>of<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d65/namespaceBBP_1_1std_1_1Lexer_1ab09b4f6b0c27fd16d1ade7bab2b6c431" kindref="member">std::Lexer::lex_keywordhandle</ref><sp/>lastIndex<sp/>=<sp/>argc;<sp/></highlight><highlight class="comment">//<sp/>Initializing<sp/>this<sp/>to<sp/>&apos;argc&apos;<sp/>tells<sp/>the<sp/>algorithm<sp/>to<sp/>ignore<sp/>this<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>the<sp/>depth<sp/>is<sp/>increasing.<sp/>Otherwise,<sp/>decreasing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAscending<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>false,<sp/>the<sp/>minimum<sp/>amount<sp/>of<sp/>things<sp/>hasn&apos;t<sp/>been<sp/>reached<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasReachedMinimum<sp/>=<sp/>min<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>handle<sp/>to<sp/>next<sp/>keyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref><sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a8249caecef89f688455c2a73135b0fc7" kindref="member">moveToNextKeyword</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>delimiter<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a76d39516f491fb0bd338c76d32ec5a34" kindref="member">delimiterDepth</ref><sp/>=<sp/>(<ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a76d39516f491fb0bd338c76d32ec5a34" kindref="member">delimiterDepth</ref><sp/>&lt;<sp/>depth)<sp/>?<sp/>depth<sp/>:<sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a76d39516f491fb0bd338c76d32ec5a34" kindref="member">delimiterDepth</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>handle<sp/>is<sp/>EOF,<sp/>return<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref><sp/>==<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae44b9b00f1ba64a04618d9cbb6358994" kindref="member">keywordStack</ref>.atElement)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1ad55996dade1a3168d6f99f7c7833d185" kindref="member">EEOF</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>keyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d91/structBBP_1_1std_1_1Lexer_1_1lex__keyword" kindref="compound">std::Lexer::lex_keyword</ref><sp/>*keyword<sp/>=<sp/>&amp;context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae44b9b00f1ba64a04618d9cbb6358994" kindref="member">keywordStack</ref>[<ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref>];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>handle<sp/>is<sp/>new<sp/>line<sp/>or<sp/>stop,<sp/>and<sp/>delimiter<sp/>stack<sp/>is<sp/>not<sp/>balanced,<sp/>and<sp/>expected<sp/>within<sp/>one<sp/>line,<sp/>return<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a4bf2b10c8db466d9a88fc2b42e28ab7e" kindref="member">isNewLine</ref>(keyword-&gt;<ref refid="d3/d91/structBBP_1_1std_1_1Lexer_1_1lex__keyword_1ad807b52c2fe694008e9696161da694df" kindref="member">word</ref>[0])<sp/>||<sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref><sp/>==<sp/>stop)<sp/>&amp;&amp;<sp/>depth<sp/>&amp;&amp;<sp/>(singleLine<sp/>||<sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref><sp/>==<sp/>stop))</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1a7c14a0a1a7d14fbe707d518eef4926a6" kindref="member">ELINEEND</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>if<sp/>we<sp/>have<sp/>reached<sp/>&apos;stop&apos;<sp/>normally,<sp/>just<sp/>break<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref><sp/>==<sp/>stop<sp/>&amp;&amp;<sp/>depth<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aux<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isIncluded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>delimiter<sp/>is<sp/>included<sp/>in<sp/>argv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>index<sp/>&lt;<sp/>argc;<sp/>index++)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[index]<sp/>!=<sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isIncluded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>handle<sp/>is<sp/>escape,<sp/>and<sp/>also<sp/>less<sp/>than<sp/>EOF,<sp/>advance<sp/>one<sp/>position<sp/>and<sp/>then<sp/>skip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref><sp/>==<sp/>escape<sp/>&amp;&amp;<sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref><sp/>!=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae44b9b00f1ba64a04618d9cbb6358994" kindref="member">keywordStack</ref>.atElement)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ad41d8972ba6f4bb4561c0e9d5e005b34" kindref="member">atPosition</ref>++;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>included,<sp/>just<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isIncluded)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>check<sp/>checks<sp/>to<sp/>see<sp/>if<sp/>the<sp/>handle<sp/>matches<sp/>the<sp/>closing<sp/>delimiter<sp/>of<sp/>the<sp/>last<sp/>found<sp/>delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>lastIndex<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>delimiter<sp/>is<sp/>the<sp/>closing<sp/>delimiter<sp/>to<sp/>the<sp/>last<sp/>found<sp/>delimiter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrease<sp/>the<sp/>depth<sp/>by<sp/>1,<sp/>and<sp/>retrieve<sp/>the<sp/>last<sp/>index<sp/>from<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth--;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>depth<sp/>(I.E.,<sp/>there<sp/>is<sp/>still<sp/>a<sp/>closing<sp/>delimiter<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/><ref refid="d6/d2d/namespaceBBP_1_1Locale_1_1Japanese_1a02c028a34a00f11967f61a67255e0e6ea69f972cf160b631cca4c040d85eecc6e" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="d6/d2d/namespaceBBP_1_1Locale_1_1Japanese_1a02c028a34a00f11967f61a67255e0e6ea69f972cf160b631cca4c040d85eecc6e" kindref="member">i</ref><sp/>&lt;<sp/>argc;<sp/><ref refid="d6/d2d/namespaceBBP_1_1Locale_1_1Japanese_1a02c028a34a00f11967f61a67255e0e6ea69f972cf160b631cca4c040d85eecc6e" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[<ref refid="d6/d2d/namespaceBBP_1_1Locale_1_1Japanese_1a02c028a34a00f11967f61a67255e0e6ea69f972cf160b631cca4c040d85eecc6e" kindref="member">i</ref>]<sp/>!=<sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a33d506930eda899e38e79b7e530f43d4" kindref="member">delimiterStack</ref>[depth<sp/>-<sp/>1])</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastIndex<sp/>=<sp/><ref refid="d6/d2d/namespaceBBP_1_1Locale_1_1Japanese_1a02c028a34a00f11967f61a67255e0e6ea69f972cf160b631cca4c040d85eecc6e" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>this<sp/>must<sp/>be<sp/>first<sp/>closer,<sp/>set<sp/>index<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isAscending)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a966532f017440223b8ec69105e0f43a7" kindref="member">firstCloser</ref><sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ad41d8972ba6f4bb4561c0e9d5e005b34" kindref="member">atPosition</ref><sp/>-<sp/>keyword-&gt;<ref refid="d3/d91/structBBP_1_1std_1_1Lexer_1_1lex__keyword_1a3a4ac4bf6edf4d4809ebc51e9fd03a5f" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>flag<sp/>to<sp/>descending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isAscending<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>add<sp/>the<sp/>handle<sp/>to<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a33d506930eda899e38e79b7e530f43d4" kindref="member">delimiterStack</ref><sp/>&lt;&lt;<sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>last<sp/>index<sp/>to<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastIndex<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>this<sp/>handle<sp/>is<sp/>for<sp/>an<sp/>opening<sp/>keyword.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOpening<sp/>=<sp/>(index<sp/>%<sp/>2<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>is<sp/>opening<sp/>and<sp/>ascending,<sp/>overwrite<sp/>previous<sp/>last<sp/>opener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isOpening<sp/>&amp;&amp;<sp/>isAscending)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1acf8de6501c14e9195e001eb839da488a" kindref="member">lastOpener</ref><sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ad41d8972ba6f4bb4561c0e9d5e005b34" kindref="member">atPosition</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>is<sp/>not<sp/>opening<sp/>but<sp/>still<sp/>ascending,<sp/>its<sp/>about<sp/>to<sp/>close.<sp/>Write<sp/>once<sp/>to<sp/>firstCloser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isOpening<sp/>&amp;&amp;<sp/>isAscending)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a966532f017440223b8ec69105e0f43a7" kindref="member">firstCloser</ref><sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ad41d8972ba6f4bb4561c0e9d5e005b34" kindref="member">atPosition</ref><sp/>-<sp/>keyword-&gt;<ref refid="d3/d91/structBBP_1_1std_1_1Lexer_1_1lex__keyword_1a3a4ac4bf6edf4d4809ebc51e9fd03a5f" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>opening,<sp/>the<sp/>sequence<sp/>must<sp/>be<sp/>descending.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isAscending<sp/>&amp;=<sp/>isOpening;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>handle<sp/>is<sp/>closing,<sp/>and<sp/>the<sp/>depth<sp/>is<sp/>0,<sp/>return<sp/>error..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isOpening<sp/>&amp;&amp;<sp/>depth<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1a7eb46ddb59ec78bac0de2d45ce2a5053" kindref="member">ENOANO</ref>;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>anode<sp/>(because<sp/>closing<sp/>delimiters<sp/>are<sp/>cathodes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>handle<sp/>is<sp/>closing,<sp/>and<sp/>is<sp/>not<sp/>the<sp/>expected<sp/>type,<sp/>return<sp/>error..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isOpening<sp/>&amp;&amp;<sp/>lastIndex<sp/>&gt;<sp/>argc<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1ac6c071293826a4e66a717bb38db7794d" kindref="member">EILSEQ</ref>;<sp/></highlight><highlight class="comment">//<sp/>Illegal<sp/>sequence<sp/>of<sp/>delimiters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>handle<sp/>is<sp/>opening,<sp/>and<sp/>the<sp/>sequence<sp/>is<sp/>descending,<sp/>return<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isOpening<sp/>&amp;&amp;<sp/>!isAscending)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1a1a3d6f27667c80cfaf6bf8067d4c5ec7" kindref="member">EUNFOCS</ref>;<sp/></highlight><highlight class="comment">//<sp/>Try<sp/>again,<sp/>but<sp/>with<sp/>the<sp/>other<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>depth<sp/>by<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth++;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasReachedMinimum<sp/>|=<sp/>depth<sp/>&gt;=<sp/>min;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>opening,<sp/>check<sp/>for<sp/>max<sp/>depth.<sp/>If<sp/>would<sp/>cause<sp/>overflow,<sp/>return<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isOpening<sp/>&amp;&amp;<sp/>depth<sp/>&gt;<sp/>maxDepth)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1a888552a5e3c78b5883904cf5d55244ab" kindref="member">EOVERFLOW</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>handle<sp/>to<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a33d506930eda899e38e79b7e530f43d4" kindref="member">delimiterStack</ref><sp/>&lt;&lt;<sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1aacfadf4e56cae85d1dd6acdda5c4f207" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(depth);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>minimum<sp/>has<sp/>not<sp/>been<sp/>reached,<sp/>return<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hasReachedMinimum)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1ae40596feaa3f66f5440b485bf7c1c2d1" kindref="member">ENOMSG</ref>;<sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>was<sp/>found,<sp/>so<sp/>no<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>done<sp/>successfully,<sp/>congrats!<sp/>My<sp/>algorithm<sp/>worked!<sp/>Good<sp/>job<sp/>me<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/dc2/errno_8h_1a5bd14e9562534453fc1e3c9b83a0aa8f" kindref="member">ENONE</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a32d036e0f72c2f867f4b83b8d5f9a351" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a32d036e0f72c2f867f4b83b8d5f9a351" kindref="member">BBP::esa::esaProcessor::includeFromPath</ref>(<ref refid="d4/dbd/classBBP_1_1std_1_1FILE" kindref="compound">std::FILE</ref><sp/>&amp;file,<sp/><ref refid="d8/dea/classBBP_1_1std_1_1PATH" kindref="compound">std::PATH</ref><sp/>&amp;filename,<sp/><ref refid="de/d21/classBBP_1_1std_1_1Stack" kindref="compound">std::Stack&lt;std::string_element&gt;</ref><sp/>&amp;dirs,<sp/><ref refid="d8/dea/classBBP_1_1std_1_1PATH" kindref="compound">std::PATH</ref><sp/>&amp;out)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>stack<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>oldPointer<sp/>=<sp/>dirs.<ref refid="de/d21/classBBP_1_1std_1_1Stack_1a752abbe63aa4dc1f0e3f13cacd9feb20" kindref="member">atElement</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>char<sp/>to<sp/>write<sp/>indicies<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>file<sp/>is<sp/>found,<sp/>this<sp/>will<sp/>be<sp/>set<sp/>to<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exists<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>for<sp/>all<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dirs.<ref refid="de/d21/classBBP_1_1std_1_1Stack_1a752abbe63aa4dc1f0e3f13cacd9feb20" kindref="member">atElement</ref>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>next<sp/>path<sp/>into<sp/>&apos;path&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirs<sp/>&gt;&gt;=<sp/>&amp;path;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>create<sp/>path<sp/>from<sp/>stored<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dea/classBBP_1_1std_1_1PATH" kindref="compound">std::PATH</ref><sp/>searchIn(<ref refid="dd/d98/namespaceBBP_1_1std_1aad5dbefef1eb6b9223decf87db4d9bad" kindref="member">BBP::std::primaryVolume</ref>,<sp/>path);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>searchIn<sp/>relative<sp/>to<sp/>physical<sp/>root.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchIn.<ref refid="d8/dea/classBBP_1_1std_1_1PATH_1a80a557105fdce73fd255af94f5c33e1d" kindref="member">makeAbsolutePath</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>path<sp/>which<sp/>will<sp/>eventually<sp/>become<sp/>the<sp/>fullpath.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dea/classBBP_1_1std_1_1PATH" kindref="compound">std::PATH</ref><sp/>rel(filename);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>file<sp/>relative<sp/>to<sp/>searchin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rel.<ref refid="d8/dea/classBBP_1_1std_1_1PATH_1a80a557105fdce73fd255af94f5c33e1d" kindref="member">makeAbsolutePath</ref>(&amp;searchIn);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beVerbose)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" kindref="member">std::printf</ref>(</highlight><highlight class="stringliteral">&quot;Searching<sp/>directory:<sp/>%s<sp/>...<sp/>&quot;</highlight><highlight class="normal">,<sp/>rel.<ref refid="d8/dea/classBBP_1_1std_1_1PATH_1a57ccb35da441b837888a28f111999d37" kindref="member">relName</ref>());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>open<sp/>file.<sp/>If<sp/>it<sp/>does<sp/>not<sp/>exist,<sp/>an<sp/>exception<sp/>is<sp/>thrown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>=<sp/><ref refid="d4/dbd/classBBP_1_1std_1_1FILE" kindref="compound">std::FILE</ref>(rel);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>point<sp/>is<sp/>reached,<sp/>file<sp/>opened<sp/>succesfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exists<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>write<sp/>to<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>rel;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beVerbose)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" kindref="member">std::printf</ref>(</highlight><highlight class="stringliteral">&quot;\e[0;32mExists\e[0;37m.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>File<sp/>exists,<sp/>exit<sp/>from<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::except<sp/>&amp;<ref refid="d6/d2d/namespaceBBP_1_1Locale_1_1Japanese_1a02c028a34a00f11967f61a67255e0e6eaa942c2da6dc667c4a5a36a37034d3a72" kindref="member">e</ref>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>File<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beVerbose)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d6/d2d/namespaceBBP_1_1Locale_1_1Japanese_1a02c028a34a00f11967f61a67255e0e6eaa942c2da6dc667c4a5a36a37034d3a72" kindref="member">e</ref>.code)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" kindref="member">std::printf</ref>(</highlight><highlight class="stringliteral">&quot;\e[0;31mFile<sp/>does<sp/>not<sp/>exist\e[0;37m\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" kindref="member">std::printf</ref>(</highlight><highlight class="stringliteral">&quot;\e[0;91mError<sp/>reading<sp/>file:\e[0;37m<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="d6/d2d/namespaceBBP_1_1Locale_1_1Japanese_1a02c028a34a00f11967f61a67255e0e6eaa942c2da6dc667c4a5a36a37034d3a72" kindref="member">e</ref>.code);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>stack<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>dirs.<ref refid="de/d21/classBBP_1_1std_1_1Stack_1a752abbe63aa4dc1f0e3f13cacd9feb20" kindref="member">atElement</ref><sp/>=<sp/>oldPointer;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exists;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1af184289074f27f191666564995b2c6d8" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1ae95e98217b6c3191605f0d7dd5f483a9" kindref="member">BBP::std::conststring</ref><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1af184289074f27f191666564995b2c6d8" kindref="member">BBP::esa::esaProcessor::includeFile</ref>(<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context" kindref="compound">std::Lexer::lex_context</ref><sp/>*context,<sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>idx)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>page<sp/>for<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dea/structBBP_1_1std_1_1STATIC__PAGE" kindref="compound">std::static_string&lt;std::max_path_length&gt;</ref><sp/>requestedPath<sp/>=<sp/><ref refid="d4/dea/structBBP_1_1std_1_1STATIC__PAGE" kindref="compound">std::static_string&lt;std::max_path_length&gt;</ref>();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>write<sp/>into<sp/>requestedPath,<sp/>the<sp/>file<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nul<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>index<sp/>=<sp/>lastOpener,<sp/>k<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>firstCloser;<sp/>index++,<sp/>k++)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dce/stddef_8h_1abe45653ace4e77c9ae4612de5535ff1d" kindref="member">__UNSAFE__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa63573041786d49b7cdb2eec8a921a6a" kindref="member">std::write</ref>)(&amp;requestedPath,<sp/><ref refid="d3/dce/stddef_8h_1abe45653ace4e77c9ae4612de5535ff1d" kindref="member">__UNSAFE__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1a1d232f50fc4e569e79449970f1b4bb9e" kindref="member">std::read</ref>)(&amp;context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a142c7a1b792ab62212927587a0aa8f87" kindref="member">data</ref>,<sp/>index),<sp/>k);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dce/stddef_8h_1abe45653ace4e77c9ae4612de5535ff1d" kindref="member">__UNSAFE__</ref>(<ref refid="dd/d98/namespaceBBP_1_1std_1aa63573041786d49b7cdb2eec8a921a6a" kindref="member">std::write</ref>)(&amp;requestedPath,<sp/>nul,<sp/>firstCloser<sp/>-<sp/>lastOpener);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>we<sp/>know<sp/>which<sp/>file<sp/>we<sp/>want<sp/>to<sp/>include,<sp/>we<sp/>can<sp/>do<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dbd/classBBP_1_1std_1_1FILE" kindref="compound">std::FILE</ref><sp/>file;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/dea/classBBP_1_1std_1_1PATH" kindref="compound">std::PATH</ref><sp/>imported;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/dea/classBBP_1_1std_1_1PATH" kindref="compound">std::PATH</ref><sp/>filename(requestedPath);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>opened<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>which<sp/>paths<sp/>to<sp/>search<sp/>based<sp/>on<sp/>delimiter<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(delimiterStack[0])</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="de/db3/Actions_8h_1ad5ee3660d6bc9b17edf23a8f0d37ca26" kindref="member">DOUBLEQUOTES_HANDLE</ref>:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opened<sp/>=<sp/>includeFromPath(file,<sp/>filename,<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a5c8aa3675b2e2225645701364d075e3f" kindref="member">usrpaths</ref>,<sp/>imported);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="de/db3/Actions_8h_1a521b78fef09371732de4168126a51642" kindref="member">OPENANGLEBRACKET_HANDLE</ref>:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opened<sp/>=<sp/>includeFromPath(file,<sp/>filename,<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a33f165b5bd78c9ae8188f49afe99307c" kindref="member">syspaths</ref>,<sp/>imported);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opened)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>including<sp/>file<sp/>if<sp/>verbose<sp/>flag<sp/>is<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beVerbose)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" kindref="member">std::printf</ref>(</highlight><highlight class="stringliteral">&quot;Including<sp/>file:<sp/>&apos;%s&apos;\n\n&quot;</highlight><highlight class="normal">,<sp/>imported.<ref refid="d8/dea/classBBP_1_1std_1_1PATH_1a57ccb35da441b837888a28f111999d37" kindref="member">relName</ref>());</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>null<sp/>termination.<sp/>Don&apos;t<sp/>know<sp/>why<sp/>I<sp/>need<sp/>to<sp/>do<sp/>this.<sp/>Shouldn&apos;t<sp/>this<sp/>be<sp/>done<sp/>somewhere<sp/>else<sp/>already<sp/>anyway?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imported.<ref refid="d8/dea/classBBP_1_1std_1_1PATH_1a5d44eef11d4945f22dddf9096bd1a261" kindref="member">fileName</ref>()[<ref refid="dd/d98/namespaceBBP_1_1std_1a05512e3a63e13122046db97314f58591" kindref="member">std::strlen</ref>(requestedPath)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>old<sp/>file<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dea/structBBP_1_1std_1_1STATIC__PAGE" kindref="compound">std::static_string&lt;128&gt;</ref><sp/>oldFileName;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a997d77887946462f3e071f11465abfae" kindref="member">std::memcpy</ref>(context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a18f7530891a334f547429090620161a0" kindref="member">activeFile</ref>,<sp/>oldFileName,<sp/>128);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>old<sp/>file<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/ddc/structBBP_1_1std_1_1PAGE" kindref="compound">std::string</ref><sp/>oldString(context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a142c7a1b792ab62212927587a0aa8f87" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1abd480c5a3803a8d9621cfdc79b051a7c" kindref="member">std::size_t</ref><sp/>oldLength<sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a5cf8e1ba39f2a942fb7c421e16e2d110" kindref="member">dataSize</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>debug<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/dca/structBBP_1_1std_1_1Lexer_1_1lex__debugInfo" kindref="compound">std::Lexer::lex_debugInfo</ref><sp/>oldInfo(context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>included<sp/>path<sp/>into<sp/>the<sp/>usr<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a5c8aa3675b2e2225645701364d075e3f" kindref="member">usrpaths</ref><sp/>&lt;&lt;=<sp/>imported.<ref refid="d8/dea/classBBP_1_1std_1_1PATH_1a64794a4662ea993081c426afc9313da4" kindref="member">pathName</ref>();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wipe<sp/>all<sp/>the<sp/>debug<sp/>data<sp/>before<sp/>and<sp/>after<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a11c0c6d9eebae9ff33957ed4be00ff1b" kindref="member">resetInfo</ref>(context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>track<sp/>of<sp/>comment<sp/>and<sp/>literal<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>commentD<sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a07495ee1f7d2448f66cd3eab88fb2678" kindref="member">commentDepth</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>literalD<sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ac2d532a2467ca11090dd26491a44ffe7" kindref="member">literalDepth</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a4e12dc72cb7f796de80bc851c86c658e" kindref="member">std::index_t</ref><sp/>posNow<sp/>=<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ad41d8972ba6f4bb4561c0e9d5e005b34" kindref="member">atPosition</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a07495ee1f7d2448f66cd3eab88fb2678" kindref="member">commentDepth</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ac2d532a2467ca11090dd26491a44ffe7" kindref="member">literalDepth</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>parsing<sp/>second<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a5cd38f62146186672890a2a20e8e4fee" kindref="member">parseFile</ref>(imported);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>file<sp/>since<sp/>we<sp/>are<sp/>done<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.<ref refid="d4/dbd/classBBP_1_1std_1_1FILE_1a0a06d09de567928faea10565289627c6" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>comment<sp/>and<sp/>literal<sp/>depths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ad41d8972ba6f4bb4561c0e9d5e005b34" kindref="member">atPosition</ref><sp/>=<sp/>posNow;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ac2d532a2467ca11090dd26491a44ffe7" kindref="member">literalDepth</ref><sp/>=<sp/>literalD;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a07495ee1f7d2448f66cd3eab88fb2678" kindref="member">commentDepth</ref><sp/>=<sp/>commentD;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wipe<sp/>all<sp/>the<sp/>debug<sp/>data<sp/>before<sp/>and<sp/>after<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a11c0c6d9eebae9ff33957ed4be00ff1b" kindref="member">resetInfo</ref>(context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>that<sp/>path<sp/>again.<sp/>Since<sp/>&apos;requestedPath&apos;<sp/>is<sp/>not<sp/>needed<sp/>anymore,<sp/>just<sp/>get<sp/>rid<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a5c8aa3675b2e2225645701364d075e3f" kindref="member">usrpaths</ref><sp/>&gt;&gt;=<sp/>&amp;requestedPath.<ref refid="df/ddc/structBBP_1_1std_1_1PAGE_1a02cc2cb6b1940e10fb3b4defba203ac6" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>debug<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref><sp/>=<sp/>oldInfo;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>old<sp/>file<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a142c7a1b792ab62212927587a0aa8f87" kindref="member">data</ref><sp/>=<sp/>oldString;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a5cf8e1ba39f2a942fb7c421e16e2d110" kindref="member">dataSize</ref><sp/>=<sp/>oldLength;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>old<sp/>file<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a997d77887946462f3e071f11465abfae" kindref="member">std::memcpy</ref>(oldFileName,<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a18f7530891a334f547429090620161a0" kindref="member">activeFile</ref>,<sp/>128);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beVerbose)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1a8d46784954bec3eed0277416001174a5" kindref="member">std::printf</ref>(</highlight><highlight class="stringliteral">&quot;File<sp/>&apos;%s&apos;<sp/>done.<sp/>Returning<sp/>to:<sp/>&apos;%s&apos;.\n&quot;</highlight><highlight class="normal">,<sp/>imported.<ref refid="d8/dea/classBBP_1_1std_1_1PATH_1a57ccb35da441b837888a28f111999d37" kindref="member">relName</ref>(),<sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a18f7530891a334f547429090620161a0" kindref="member">activeFile</ref>.data);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1a11c0c6d9eebae9ff33957ed4be00ff1b" kindref="member">resetInfo</ref>(context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref>.<ref refid="db/dca/structBBP_1_1std_1_1Lexer_1_1lex__debugInfo_1a660c9195a37abea01adae53a336071fa" kindref="member">highlight</ref><sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref>.<ref refid="db/dca/structBBP_1_1std_1_1Lexer_1_1lex__debugInfo_1a0b138b5c9d81f6ea1fc4e38de5957a9b" kindref="member">highlightLength</ref><sp/>=<sp/>firstCloser<sp/>-<sp/>idx<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;<ref refid="d1/dc2/classBBP_1_1std_1_1Lexer_1_1lex__context_1ae5eed825129c76c1fcdb60647803deab" kindref="member">debugInformation</ref>.<ref refid="db/dca/structBBP_1_1std_1_1Lexer_1_1lex__debugInfo_1a0f1081c24cc35e64827616570e21f82c" kindref="member">highlightmsg</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NIncluded<sp/>here&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ENo<sp/>such<sp/>file<sp/>or<sp/>directory.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a51819f1bfee1b178381104ad84cfb97d" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1ae104641b17c021a901add93f7bc5d808" kindref="member">BBP::std::word</ref><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1a51819f1bfee1b178381104ad84cfb97d" kindref="member">BBP::esa::esaProcessor::calculateArgumentOffset</ref>()</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1ae104641b17c021a901add93f7bc5d808" kindref="member">std::word</ref><sp/>offset<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1ae104641b17c021a901add93f7bc5d808" kindref="member">std::word</ref><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>atArgument;<sp/>index++)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>instruction.args[index].trailerCount<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>*=<sp/>4;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1ad8c3bca0dfb62e333282fa375ae094a7" refkind="member"><highlight class="normal"><ref refid="dd/d98/namespaceBBP_1_1std_1ae104641b17c021a901add93f7bc5d808" kindref="member">BBP::std::word</ref><sp/><ref refid="db/d1d/classBBP_1_1esa_1_1esaProcessor_1ad8c3bca0dfb62e333282fa375ae094a7" kindref="member">BBP::esa::esaProcessor::calculateAbsoluteArgumentOffset</ref>()</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d98/namespaceBBP_1_1std_1ae104641b17c021a901add93f7bc5d808" kindref="member">std::word</ref><sp/>offset<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d98/namespaceBBP_1_1std_1ae104641b17c021a901add93f7bc5d808" kindref="member">std::word</ref><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>atArgument;<sp/>index++)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>instruction.args[index].trailerCount<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>*=<sp/>4;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset<sp/>+<sp/>application-&gt;builder.sections[application-&gt;builder.text].stack.atElement;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/stran/Documents/23IN01/Design/Software/BBP/Source/ELSA/Auxiliary.cpp"/>
  </compounddef>
</doxygen>
