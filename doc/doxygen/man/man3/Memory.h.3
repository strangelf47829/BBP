.TH "Memory.h" 3 "Fri Jan 26 2024" "Version 0.2.0" "BBP Embedded kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Memory.h
.SH SYNOPSIS
.br
.PP
\fC#include 'stddef\&.h'\fP
.br
\fC#include 'Memory\&.hxx'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBBBP::std::PAGE< T >\fP"
.br
.ti -1c
.RI "struct \fBBBP::std::STATIC_PAGE< T, K >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBBBP\fP"
.br
.ti -1c
.RI " \fBBBP::std\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSTATIC_STACK\fP(type,  identifier)"
.br
.ti -1c
.RI "#define \fBSTATIC_STRSTACK\fP(identifier)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > void \fBBBP::std::write\fP (PAGE< T > *page, T &data, index_t index)"
.br
.ti -1c
.RI "template<typename T > void \fBBBP::std::write_r\fP (PAGE< T > *page, mem_t &data, index_t index)"
.br
.ti -1c
.RI "template<typename T > void \fBBBP::std::write_a\fP (PAGE< T > *page, T *data, index_t index, size_t amount)"
.br
.ti -1c
.RI "template<typename T > void \fBBBP::std::write_ar\fP (PAGE< T > *page, mem_t *data, index_t index, size_t amount)"
.br
.ti -1c
.RI "template<typename T > void \fB__UNSAFE__\fP() \fBBBP::std::write\fP (PAGE< T > *page, T &data, index_t index)"
.br
.ti -1c
.RI "template<typename T > void \fB__UNSAFE__\fP() \fBBBP::std::write_a\fP (PAGE< T > *page, T *data, index_t index, size_t amount)"
.br
.ti -1c
.RI "template<typename T > void \fB__UNSAFE__\fP() \fBBBP::std::write_r\fP (PAGE< T > *page, mem_t &data, index_t index)"
.br
.ti -1c
.RI "template<typename T > T & \fBBBP::std::read\fP (PAGE< T > *page, index_t index)"
.br
.ti -1c
.RI "template<typename T > mem_t & \fBBBP::std::read_r\fP (PAGE< T > *page, index_t index)"
.br
.ti -1c
.RI "template<typename T > T * \fBBBP::std::read_a\fP (PAGE< T > *page, index_t index)"
.br
.ti -1c
.RI "template<typename T > mem_t * \fBBBP::std::read_ar\fP (PAGE< T > *page, index_t index)"
.br
.ti -1c
.RI "template<typename T > T &\fB__UNSAFE__\fP() \fBBBP::std::read\fP (PAGE< T > *page, index_t index)"
.br
.ti -1c
.RI "template<typename T > mem_t &\fB__UNSAFE__\fP() \fBBBP::std::read_r\fP (PAGE< T > *page, index_t index)"
.br
.ti -1c
.RI "template<typename T > T *\fB__UNSAFE__\fP() \fBBBP::std::read_a\fP (PAGE< T > *page, index_t index)"
.br
.ti -1c
.RI "template<typename T > mem_t *\fB__UNSAFE__\fP() \fBBBP::std::read_ar\fP (PAGE< T > *page, index_t index)"
.br
.ti -1c
.RI "template<typename T > std::PAGE< T > & \fBBBP::std::last\fP (std::PAGE< T > &)"
.br
.ti -1c
.RI "template<typename T > std::PAGE< T > & \fBBBP::std::first\fP (std::PAGE< T > &)"
.br
.ti -1c
.RI "template<typename T > size_t \fBBBP::std::seqlen\fP (PAGE< T > &page)"
.br
.ti -1c
.RI "template<typename T > size_t \fBBBP::std::seqlen_r\fP (PAGE< T > &page)"
.br
.ti -1c
.RI "template<typename T > size_t \fB__UNSAFE__\fP() \fBBBP::std::seqlen\fP (PAGE< T > &page)"
.br
.ti -1c
.RI "template<typename T > size_t \fB__UNSAFE__\fP() \fBBBP::std::seqlen_r\fP (PAGE< T > &page)"
.br
.ti -1c
.RI "template<typename T > void \fBBBP::std::memcpy\fP (PAGE< T > &src, PAGE< T > &dst, size_t amount)"
.br
.ti -1c
.RI "template<typename T > void \fBBBP::std::memcpy\fP (PAGE< T > &src, PAGE< T > &dst)"
.br
.ti -1c
.RI "template<typename T > bool \fBBBP::std::memcmp\fP (PAGE< T > &src, PAGE< T > &dst)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "constexpr word \fBBBP::std::max_page_elements\fP = 20000"
.br
.ti -1c
.RI "constexpr word \fBBBP::std::max_page_static_size\fP = 20000"
.br
.ti -1c
.RI "constexpr word \fBBBP::std::max_page_pointer_size\fP = max_page_elements"
.br
.ti -1c
.RI "constexpr word \fBBBP::std::max_page_sequence_length\fP = 64"
.br
.ti -1c
.RI "constexpr word \fBBBP::std::max_lpage_static_size\fP = 0x2000"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define STATIC_STACK(type, identifier)"
\fBValue:\fP
.PP
.nf
static BBP::std::STATIC_PAGE<type> identifier##PAGE;\
BBP::std::Stack<type> identifier(&identifier##PAGE);
.fi
.PP
Definition at line 6 of file Memory\&.h\&.
.SS "#define STATIC_STRSTACK(identifier)"
\fBValue:\fP
.PP
.nf
static BBP::std::static_string identifier##PAGE;\
static BBP::std::Stack<BBP::std::string_element> identifier(&identifier##PAGE);
.fi
.PP
Definition at line 9 of file Memory\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for BBP Embedded kernel from the source code\&.
