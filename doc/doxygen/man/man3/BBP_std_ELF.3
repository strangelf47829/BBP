.TH "BBP::std::ELF" 3 "Fri Jan 26 2024" "Version 0.2.0" "BBP Embedded kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BBP::std::ELF
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "class \fBELFBuilder\fP"
.br
.ti -1c
.RI "struct \fBElfHeader\fP"
.br
.ti -1c
.RI "struct \fBProgramHeader\fP"
.br
.ti -1c
.RI "struct \fBRelaEntry\fP"
.br
.ti -1c
.RI "struct \fBRelEntry\fP"
.br
.ti -1c
.RI "class \fBSectionBuilder\fP"
.br
.ti -1c
.RI "struct \fBSectionHeader\fP"
.br
.ti -1c
.RI "class \fBSegmentBuilder\fP"
.br
.ti -1c
.RI "class \fBSymbolBuilder\fP"
.br
.ti -1c
.RI "struct \fBSymbolEntry\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBE_TYPE\fP { \fBET_NONE\fP = 0, \fBET_REL\fP = 1, \fBET_EXEC\fP = 2, \fBET_DYN\fP = 3, \fBET_CORE\fP = 4, \fBET_NONE\fP = 0, \fBET_REL\fP = 1, \fBET_EXEC\fP = 2, \fBET_DYN\fP = 3, \fBET_CORE\fP = 4 }"
.br
.ti -1c
.RI "enum \fBE_MACHINE\fP { \fBX86\fP = 0x03, \fBMIPS\fP = 0x08, \fBARM\fP = 0x28, \fBAMD64\fP = 0x3E, \fBARMV8\fP = 0xB7, \fBRISCV\fP = 0xF3, \fBX86\fP = 0x03, \fBMIPS\fP = 0x08, \fBARM\fP = 0x28, \fBAMD64\fP = 0x3E, \fBARMV8\fP = 0xB7, \fBRISCV\fP = 0xF3 }"
.br
.ti -1c
.RI "enum \fBP_TYPE\fP { \fBPT_NILL\fP = 0, \fBPT_LOAD\fP = 1, \fBPT_DYNAMIC\fP = 2, \fBPT_INTERP\fP = 3, \fBPT_NOTE\fP = 4, \fBPT_SHLIB\fP = 5, \fBPT_PHDR\fP = 6, \fBPT_TLS\fP = 7, \fBPT_NILL\fP = 0, \fBPT_LOAD\fP = 1, \fBPT_DYNAMIC\fP = 2, \fBPT_INTERP\fP = 3, \fBPT_NOTE\fP = 4, \fBPT_SHLIB\fP = 5, \fBPT_PHDR\fP = 6, \fBPT_TLS\fP = 7 }"
.br
.ti -1c
.RI "enum \fBSH_TYPE\fP { \fBSHT_NILL\fP = 0, \fBSHT_PROGBITS\fP = 1, \fBSHT_SYMTAB\fP = 2, \fBSHT_STRTAB\fP = 3, \fBSHT_RELA\fP = 4, \fBSHT_HASH\fP = 5, \fBSHT_DYNAMIC\fP = 6, \fBSHT_NOTE\fP = 7, \fBSHT_NOBITS\fP = 8, \fBSHT_REL\fP = 9, \fBSHT_SHLIB\fP = 10, \fBSHT_DYNSYM\fP = 11, \fBSHT_NILL\fP = 0, \fBSHT_PROGBITS\fP = 1, \fBSHT_SYMTAB\fP = 2, \fBSHT_STRTAB\fP = 3, \fBSHT_RELA\fP = 4, \fBSHT_HASH\fP = 5, \fBSHT_DYNAMIC\fP = 6, \fBSHT_NOTE\fP = 7, \fBSHT_NOBITS\fP = 8, \fBSHT_REL\fP = 9, \fBSHT_SHLIB\fP = 10, \fBSHT_DYNSYM\fP = 11 }"
.br
.ti -1c
.RI "enum \fBSYM_TYPE\fP { \fBSYM_LOCAL\fP = 0x00, \fBSYM_GLOBAL\fP = 0x10, \fBSYM_WEAK\fP = 0x20, \fBSYM_NONE\fP = 0x00, \fBSYM_OBJECT\fP = 0x01, \fBSYM_FUNC\fP = 0x02, \fBSYM_SECTION\fP = 0x03, \fBSYM_FILE\fP = 0x04, \fBSYM_COMMON\fP = 0x05, \fBSYM_TLS\fP = 0x06, \fBSYM_RELC\fP = 0x08, \fBSYM_SRELC\fP = 0x09 }"
.br
.ti -1c
.RI "enum \fBSHN_NDX\fP { \fBSHN_UNDEF\fP = 0x00, \fBSHN_BEFORE\fP = 0xff00, \fBSHN_AFTER\fP = 0xff01, \fBSHN_ABS\fP = 0xfff1, \fBSHN_COMMON\fP = 0xfff2 }"
.br
.ti -1c
.RI "enum \fBSectionTypes\fP : std::byte { \fBWriteable\fP = 1, \fBAllocator\fP = 2, \fBExecutable\fP = 4 }"
.br
.ti -1c
.RI "enum \fBE_TYPE\fP { \fBET_NONE\fP = 0, \fBET_REL\fP = 1, \fBET_EXEC\fP = 2, \fBET_DYN\fP = 3, \fBET_CORE\fP = 4, \fBET_NONE\fP = 0, \fBET_REL\fP = 1, \fBET_EXEC\fP = 2, \fBET_DYN\fP = 3, \fBET_CORE\fP = 4 }"
.br
.ti -1c
.RI "enum \fBE_MACHINE\fP { \fBX86\fP = 0x03, \fBMIPS\fP = 0x08, \fBARM\fP = 0x28, \fBAMD64\fP = 0x3E, \fBARMV8\fP = 0xB7, \fBRISCV\fP = 0xF3, \fBX86\fP = 0x03, \fBMIPS\fP = 0x08, \fBARM\fP = 0x28, \fBAMD64\fP = 0x3E, \fBARMV8\fP = 0xB7, \fBRISCV\fP = 0xF3 }"
.br
.ti -1c
.RI "enum \fBP_TYPE\fP { \fBPT_NILL\fP = 0, \fBPT_LOAD\fP = 1, \fBPT_DYNAMIC\fP = 2, \fBPT_INTERP\fP = 3, \fBPT_NOTE\fP = 4, \fBPT_SHLIB\fP = 5, \fBPT_PHDR\fP = 6, \fBPT_TLS\fP = 7, \fBPT_NILL\fP = 0, \fBPT_LOAD\fP = 1, \fBPT_DYNAMIC\fP = 2, \fBPT_INTERP\fP = 3, \fBPT_NOTE\fP = 4, \fBPT_SHLIB\fP = 5, \fBPT_PHDR\fP = 6, \fBPT_TLS\fP = 7 }"
.br
.ti -1c
.RI "enum \fBSH_TYPE\fP { \fBSHT_NILL\fP = 0, \fBSHT_PROGBITS\fP = 1, \fBSHT_SYMTAB\fP = 2, \fBSHT_STRTAB\fP = 3, \fBSHT_RELA\fP = 4, \fBSHT_HASH\fP = 5, \fBSHT_DYNAMIC\fP = 6, \fBSHT_NOTE\fP = 7, \fBSHT_NOBITS\fP = 8, \fBSHT_REL\fP = 9, \fBSHT_SHLIB\fP = 10, \fBSHT_DYNSYM\fP = 11, \fBSHT_NILL\fP = 0, \fBSHT_PROGBITS\fP = 1, \fBSHT_SYMTAB\fP = 2, \fBSHT_STRTAB\fP = 3, \fBSHT_RELA\fP = 4, \fBSHT_HASH\fP = 5, \fBSHT_DYNAMIC\fP = 6, \fBSHT_NOTE\fP = 7, \fBSHT_NOBITS\fP = 8, \fBSHT_REL\fP = 9, \fBSHT_SHLIB\fP = 10, \fBSHT_DYNSYM\fP = 11 }"
.br
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBBBP::std::ELF::E_MACHINE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIX86 \fP\fP
.TP
\fB\fIMIPS \fP\fP
.TP
\fB\fIARM \fP\fP
.TP
\fB\fIAMD64 \fP\fP
.TP
\fB\fIARMV8 \fP\fP
.TP
\fB\fIRISCV \fP\fP
.TP
\fB\fIX86 \fP\fP
.TP
\fB\fIMIPS \fP\fP
.TP
\fB\fIARM \fP\fP
.TP
\fB\fIAMD64 \fP\fP
.TP
\fB\fIARMV8 \fP\fP
.TP
\fB\fIRISCV \fP\fP
.PP
Definition at line 104 of file ELF32\&.h\&.
.PP
.nf
105             {
106                 X86 = 0x03,
107                 MIPS = 0x08,
108                 ARM = 0x28,
109                 AMD64 = 0x3E,
110                 ARMV8 = 0xB7,
111                 RISCV = 0xF3
112             } E_MACHINE;
.fi
.SS "enum \fBBBP::std::ELF::E_MACHINE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIX86 \fP\fP
.TP
\fB\fIMIPS \fP\fP
.TP
\fB\fIARM \fP\fP
.TP
\fB\fIAMD64 \fP\fP
.TP
\fB\fIARMV8 \fP\fP
.TP
\fB\fIRISCV \fP\fP
.TP
\fB\fIX86 \fP\fP
.TP
\fB\fIMIPS \fP\fP
.TP
\fB\fIARM \fP\fP
.TP
\fB\fIAMD64 \fP\fP
.TP
\fB\fIARMV8 \fP\fP
.TP
\fB\fIRISCV \fP\fP
.PP
Definition at line 106 of file ELF64\&.h\&.
.PP
.nf
107             {
108                 X86 = 0x03,
109                 MIPS = 0x08,
110                 ARM = 0x28,
111                 AMD64 = 0x3E,
112                 ARMV8 = 0xB7,
113                 RISCV = 0xF3
114             } E_MACHINE;
.fi
.SS "enum \fBBBP::std::ELF::E_TYPE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIET_NONE \fP\fP
No File Type\&. 
.TP
\fB\fIET_REL \fP\fP
Relocatable file type\&. 
.TP
\fB\fIET_EXEC \fP\fP
\fBExecutable\fP file type\&. 
.TP
\fB\fIET_DYN \fP\fP
Shared Object File\&. 
.TP
\fB\fIET_CORE \fP\fP
Core file type\&. 
.TP
\fB\fIET_NONE \fP\fP
No File Type\&. 
.TP
\fB\fIET_REL \fP\fP
Relocatable file type\&. 
.TP
\fB\fIET_EXEC \fP\fP
\fBExecutable\fP file type\&. 
.TP
\fB\fIET_DYN \fP\fP
Shared Object File\&. 
.TP
\fB\fIET_CORE \fP\fP
Core file type\&. 
.PP
Definition at line 95 of file ELF32\&.h\&.
.PP
.nf
96             {
97                 ET_NONE = 0,    
98                 ET_REL = 1,     
99                 ET_EXEC = 2,    
100                 ET_DYN = 3,     
101                 ET_CORE = 4     
102             } E_TYPE;
.fi
.SS "enum \fBBBP::std::ELF::E_TYPE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIET_NONE \fP\fP
No File Type\&. 
.TP
\fB\fIET_REL \fP\fP
Relocatable file type\&. 
.TP
\fB\fIET_EXEC \fP\fP
\fBExecutable\fP file type\&. 
.TP
\fB\fIET_DYN \fP\fP
Shared Object File\&. 
.TP
\fB\fIET_CORE \fP\fP
Core file type\&. 
.TP
\fB\fIET_NONE \fP\fP
No File Type\&. 
.TP
\fB\fIET_REL \fP\fP
Relocatable file type\&. 
.TP
\fB\fIET_EXEC \fP\fP
\fBExecutable\fP file type\&. 
.TP
\fB\fIET_DYN \fP\fP
Shared Object File\&. 
.TP
\fB\fIET_CORE \fP\fP
Core file type\&. 
.PP
Definition at line 97 of file ELF64\&.h\&.
.PP
.nf
98             {
99                 ET_NONE = 0,    
100                 ET_REL = 1,     
101                 ET_EXEC = 2,    
102                 ET_DYN = 3,     
103                 ET_CORE = 4     
104             } E_TYPE;
.fi
.SS "enum \fBBBP::std::ELF::P_TYPE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPT_NILL \fP\fP
Place holder\&. (Disabled) 
.TP
\fB\fIPT_LOAD \fP\fP
Load segment type\&. This segment will be loaded into memory\&. Can also be used to create 0 initialized segments by 'specifying a larger size in memory than is loaded from the file'\&. 
.TP
\fB\fIPT_DYNAMIC \fP\fP
Contains information required for dynamically linking binaries\&. Is interpreted by the OS\&. 
.TP
\fB\fIPT_INTERP \fP\fP
Specifies the program interpreter required for this dynamic executable\&. 
.TP
\fB\fIPT_NOTE \fP\fP
Aux data for binary\&. 
.TP
\fB\fIPT_SHLIB \fP\fP
Undefined\&. Do not use\&. 
.TP
\fB\fIPT_PHDR \fP\fP
Program header table data\&. 
.TP
\fB\fIPT_TLS \fP\fP
Thread local storage\&. 
.TP
\fB\fIPT_NILL \fP\fP
Place holder\&. (Disabled) 
.TP
\fB\fIPT_LOAD \fP\fP
Load segment type\&. This segment will be loaded into memory\&. Can also be used to create 0 initialized segments by 'specifying a larger size in memory than is loaded from the file'\&. 
.TP
\fB\fIPT_DYNAMIC \fP\fP
Contains information required for dynamically linking binaries\&. Is interpreted by the OS\&. 
.TP
\fB\fIPT_INTERP \fP\fP
Specifies the program interpreter required for this dynamic executable\&. 
.TP
\fB\fIPT_NOTE \fP\fP
Aux data for binary\&. 
.TP
\fB\fIPT_SHLIB \fP\fP
Undefined\&. Do not use\&. 
.TP
\fB\fIPT_PHDR \fP\fP
Program header table data\&. 
.TP
\fB\fIPT_TLS \fP\fP
Thread local storage\&. 
.PP
Definition at line 114 of file ELF32\&.h\&.
.PP
.nf
115             {
116                 PT_NILL = 0,    
117                 PT_LOAD = 1,    
118                 PT_DYNAMIC = 2, 
119                 PT_INTERP = 3,  
120                 PT_NOTE = 4,    
121                 PT_SHLIB = 5,   
122                 PT_PHDR = 6,    
123                 PT_TLS = 7  
124             } P_TYPE;
.fi
.SS "enum \fBBBP::std::ELF::P_TYPE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPT_NILL \fP\fP
Place holder\&. (Disabled) 
.TP
\fB\fIPT_LOAD \fP\fP
Load segment type\&. This segment will be loaded into memory\&. Can also be used to create 0 initialized segments by 'specifying a larger size in memory than is loaded from the file'\&. 
.TP
\fB\fIPT_DYNAMIC \fP\fP
Contains information required for dynamically linking binaries\&. Is interpreted by the OS\&. 
.TP
\fB\fIPT_INTERP \fP\fP
Specifies the program interpreter required for this dynamic executable\&. 
.TP
\fB\fIPT_NOTE \fP\fP
Aux data for binary\&. 
.TP
\fB\fIPT_SHLIB \fP\fP
Undefined\&. Do not use\&. 
.TP
\fB\fIPT_PHDR \fP\fP
Program header table data\&. 
.TP
\fB\fIPT_TLS \fP\fP
Thread local storage\&. 
.TP
\fB\fIPT_NILL \fP\fP
Place holder\&. (Disabled) 
.TP
\fB\fIPT_LOAD \fP\fP
Load segment type\&. This segment will be loaded into memory\&. Can also be used to create 0 initialized segments by 'specifying a larger size in memory than is loaded from the file'\&. 
.TP
\fB\fIPT_DYNAMIC \fP\fP
Contains information required for dynamically linking binaries\&. Is interpreted by the OS\&. 
.TP
\fB\fIPT_INTERP \fP\fP
Specifies the program interpreter required for this dynamic executable\&. 
.TP
\fB\fIPT_NOTE \fP\fP
Aux data for binary\&. 
.TP
\fB\fIPT_SHLIB \fP\fP
Undefined\&. Do not use\&. 
.TP
\fB\fIPT_PHDR \fP\fP
Program header table data\&. 
.TP
\fB\fIPT_TLS \fP\fP
Thread local storage\&. 
.PP
Definition at line 116 of file ELF64\&.h\&.
.PP
.nf
117             {
118                 PT_NILL = 0,    
119                 PT_LOAD = 1,    
120                 PT_DYNAMIC = 2, 
121                 PT_INTERP = 3,  
122                 PT_NOTE = 4,    
123                 PT_SHLIB = 5,   
124                 PT_PHDR = 6,    
125                 PT_TLS = 7  
126             } P_TYPE;
.fi
.SS "enum \fBBBP::std::ELF::SectionTypes\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIWriteable \fP\fP
.TP
\fB\fIAllocator \fP\fP
.TP
\fB\fIExecutable \fP\fP
.PP
Definition at line 206 of file ELF32\&.h\&.
.PP
.nf
206                               : std::byte {
207                 Writeable = 1,
208                 Allocator = 2,
209                 Executable = 4
210             };
.fi
.SS "enum \fBBBP::std::ELF::SH_TYPE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISHT_NILL \fP\fP
Inactive section\&. 
.TP
\fB\fISHT_PROGBITS \fP\fP
Contains data for the program\&. 
.TP
\fB\fISHT_SYMTAB \fP\fP
Symbol table\&. List of symbol tables\&. 
.TP
\fB\fISHT_STRTAB \fP\fP
String table\&. This is what e_shstrndx points to\&. 
.TP
\fB\fISHT_RELA \fP\fP
Relocation A\&. Contains information on how to modify sections\&. 
.TP
\fB\fISHT_HASH \fP\fP
Hash table\&. 
.TP
\fB\fISHT_DYNAMIC \fP\fP
Information required for dynamic linking\&. 
.TP
\fB\fISHT_NOTE \fP\fP
Contains auxiliary info\&. 
.TP
\fB\fISHT_NOBITS \fP\fP
Section that takes no space in the file\&. 
.TP
\fB\fISHT_REL \fP\fP
Relocation\&. Contains information on how to modify sections\&. 
.TP
\fB\fISHT_SHLIB \fP\fP
Reserved, but unused\&. 
.TP
\fB\fISHT_DYNSYM \fP\fP
Symbol table\&. Used to define external symbols and so\&. 
.TP
\fB\fISHT_NILL \fP\fP
Inactive section\&. 
.TP
\fB\fISHT_PROGBITS \fP\fP
Contains data for the program\&. 
.TP
\fB\fISHT_SYMTAB \fP\fP
Symbol table\&. List of symbol tables\&. 
.TP
\fB\fISHT_STRTAB \fP\fP
String table\&. This is what e_shstrndx points to\&. 
.TP
\fB\fISHT_RELA \fP\fP
Relocation A\&. Contains information on how to modify sections\&. 
.TP
\fB\fISHT_HASH \fP\fP
Hash table\&. 
.TP
\fB\fISHT_DYNAMIC \fP\fP
Information required for dynamic linking\&. 
.TP
\fB\fISHT_NOTE \fP\fP
Contains auxiliary info\&. 
.TP
\fB\fISHT_NOBITS \fP\fP
Section that takes no space in the file\&. 
.TP
\fB\fISHT_REL \fP\fP
Relocation\&. Contains information on how to modify sections\&. 
.TP
\fB\fISHT_SHLIB \fP\fP
Reserved, but unused\&. 
.TP
\fB\fISHT_DYNSYM \fP\fP
Symbol table\&. Used to define external symbols and so\&. 
.PP
Definition at line 126 of file ELF32\&.h\&.
.PP
.nf
126                          {
127                 SHT_NILL = 0,       
128                 SHT_PROGBITS = 1,   
129                 SHT_SYMTAB = 2,     
130                 SHT_STRTAB = 3,     
131                 SHT_RELA = 4,       
132                 SHT_HASH = 5,       
133                 SHT_DYNAMIC = 6,    
134                 SHT_NOTE = 7,       
135                 SHT_NOBITS = 8,     
136                 SHT_REL = 9,        
137                 SHT_SHLIB = 10,     
138                 SHT_DYNSYM = 11     
139             } SH_TYPE;
.fi
.SS "enum \fBBBP::std::ELF::SH_TYPE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISHT_NILL \fP\fP
Inactive section\&. 
.TP
\fB\fISHT_PROGBITS \fP\fP
Contains data for the program\&. 
.TP
\fB\fISHT_SYMTAB \fP\fP
Symbol table\&. List of symbol tables\&. 
.TP
\fB\fISHT_STRTAB \fP\fP
String table\&. This is what e_shstrndx points to\&. 
.TP
\fB\fISHT_RELA \fP\fP
Relocation A\&. Contains information on how to modify sections\&. 
.TP
\fB\fISHT_HASH \fP\fP
Hash table\&. 
.TP
\fB\fISHT_DYNAMIC \fP\fP
Information required for dynamic linking\&. 
.TP
\fB\fISHT_NOTE \fP\fP
Contains auxiliary info\&. 
.TP
\fB\fISHT_NOBITS \fP\fP
Section that takes no space in the file\&. 
.TP
\fB\fISHT_REL \fP\fP
Relocation\&. Contains information on how to modify sections\&. 
.TP
\fB\fISHT_SHLIB \fP\fP
Reserved, but unused\&. 
.TP
\fB\fISHT_DYNSYM \fP\fP
Symbol table\&. Used to define external symbols and so\&. 
.TP
\fB\fISHT_NILL \fP\fP
Inactive section\&. 
.TP
\fB\fISHT_PROGBITS \fP\fP
Contains data for the program\&. 
.TP
\fB\fISHT_SYMTAB \fP\fP
Symbol table\&. List of symbol tables\&. 
.TP
\fB\fISHT_STRTAB \fP\fP
String table\&. This is what e_shstrndx points to\&. 
.TP
\fB\fISHT_RELA \fP\fP
Relocation A\&. Contains information on how to modify sections\&. 
.TP
\fB\fISHT_HASH \fP\fP
Hash table\&. 
.TP
\fB\fISHT_DYNAMIC \fP\fP
Information required for dynamic linking\&. 
.TP
\fB\fISHT_NOTE \fP\fP
Contains auxiliary info\&. 
.TP
\fB\fISHT_NOBITS \fP\fP
Section that takes no space in the file\&. 
.TP
\fB\fISHT_REL \fP\fP
Relocation\&. Contains information on how to modify sections\&. 
.TP
\fB\fISHT_SHLIB \fP\fP
Reserved, but unused\&. 
.TP
\fB\fISHT_DYNSYM \fP\fP
Symbol table\&. Used to define external symbols and so\&. 
.PP
Definition at line 128 of file ELF64\&.h\&.
.PP
.nf
128                          {
129                 SHT_NILL = 0,       
130                 SHT_PROGBITS = 1,   
131                 SHT_SYMTAB = 2,     
132                 SHT_STRTAB = 3,     
133                 SHT_RELA = 4,       
134                 SHT_HASH = 5,       
135                 SHT_DYNAMIC = 6,    
136                 SHT_NOTE = 7,       
137                 SHT_NOBITS = 8,     
138                 SHT_REL = 9,        
139                 SHT_SHLIB = 10,     
140                 SHT_DYNSYM = 11     
141             } SH_TYPE;
.fi
.SS "enum \fBBBP::std::ELF::SHN_NDX\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISHN_UNDEF \fP\fP
.TP
\fB\fISHN_BEFORE \fP\fP
.TP
\fB\fISHN_AFTER \fP\fP
.TP
\fB\fISHN_ABS \fP\fP
.TP
\fB\fISHN_COMMON \fP\fP
.PP
Definition at line 156 of file ELF32\&.h\&.
.PP
.nf
156                          {
157                 SHN_UNDEF = 0x00,
158                 SHN_BEFORE = 0xff00,
159                 SHN_AFTER = 0xff01,
160                 SHN_ABS = 0xfff1,
161                 SHN_COMMON = 0xfff2
162             } SHN_NDX;
.fi
.SS "enum \fBBBP::std::ELF::SYM_TYPE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISYM_LOCAL \fP\fP
.TP
\fB\fISYM_GLOBAL \fP\fP
.TP
\fB\fISYM_WEAK \fP\fP
.TP
\fB\fISYM_NONE \fP\fP
.TP
\fB\fISYM_OBJECT \fP\fP
.TP
\fB\fISYM_FUNC \fP\fP
.TP
\fB\fISYM_SECTION \fP\fP
.TP
\fB\fISYM_FILE \fP\fP
.TP
\fB\fISYM_COMMON \fP\fP
.TP
\fB\fISYM_TLS \fP\fP
.TP
\fB\fISYM_RELC \fP\fP
.TP
\fB\fISYM_SRELC \fP\fP
.PP
Definition at line 141 of file ELF32\&.h\&.
.PP
.nf
141                          {
142                 SYM_LOCAL = 0x00,
143                 SYM_GLOBAL = 0x10,
144                 SYM_WEAK = 0x20,
145                 SYM_NONE = 0x00,
146                 SYM_OBJECT = 0x01,
147                 SYM_FUNC = 0x02,
148                 SYM_SECTION = 0x03,
149                 SYM_FILE = 0x04,
150                 SYM_COMMON = 0x05,
151                 SYM_TLS = 0x06,
152                 SYM_RELC = 0x08,
153                 SYM_SRELC = 0x09,
154             } SYM_TYPE;
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for BBP Embedded kernel from the source code\&.
