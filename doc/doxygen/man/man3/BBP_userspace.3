.TH "BBP::userspace" 3 "Fri Jan 26 2024" "Version 0.2.0" "BBP Embedded kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BBP::userspace
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "class \fBBinaryExecutable\fP"
.br
.ti -1c
.RI "class \fBHyperVisor\fP"
.br
.ti -1c
.RI "struct \fBInstruction\fP"
.br
.ti -1c
.RI "class \fBRAE\fP"
.br
.ti -1c
.RI "struct \fBregister_t\fP"
.br
.ti -1c
.RI "struct \fBThread\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBOPCODES\fP : std::byte { \fBNIL\fP = 0, \fBSTACK\fP = 1, \fBCTRL\fP = 2, \fBMEM\fP = 3, \fBINC\fP = 4, \fBDEC\fP = 5, \fBNEG\fP = 6, \fBADD\fP = 7, \fBSUB\fP = 8, \fBMUL\fP = 9, \fBDIV\fP = 10, \fBMOD\fP = 11, \fBLBS\fP = 12, \fBRBS\fP = 13, \fBOR\fP = 14, \fBXOR\fP = 15, \fBAND\fP = 16, \fBNOT\fP = 17, \fBFLAG\fP = 18, \fBJMP\fP = 19, \fBJMPZ\fP = 20, \fBJMPC\fP = 21, \fBPAGE\fP = 22, \fBSIGNAL\fP = 23, \fBHALT\fP = 24 }"
.br
.ti -1c
.RI "enum \fBSTACKSUFFIXES\fP : std::byte { \fBpush\fP = 1, \fBpop\fP = 2, \fBargument\fP = 4 }"
.br
.ti -1c
.RI "enum \fBCTRLSUFFIXES\fP : std::byte { \fBret\fP = 1, \fBcall\fP = 2, \fBcallp\fP = 4, \fBsyscall\fP = 8, \fBroutine\fP = 16, \fBabsolute\fP = 32 }"
.br
.ti -1c
.RI "enum \fBMATHSUFFIXES\fP : std::byte { \fBffloat\fP = 1, \fBsfloat\fP = 2 }"
.br
.ti -1c
.RI "enum \fBLOGICSUFFIXES\fP : std::byte { \fBbitwise\fP = 1, \fBinplace\fP = 2 }"
.br
.ti -1c
.RI "enum \fBJMPSUFFIXES\fP : std::byte { \fBjmproutine\fP = 1, \fBnegated\fP = 2, \fBlessthan\fP = 4, \fBgreaterthan\fP = 8, \fBequalto\fP = 16, \fBabsoluteJmp\fP = 32 }"
.br
.ti -1c
.RI "enum \fBPAGESUFFIXES\fP : std::byte { \fBassign\fP = 1, \fBread\fP = 2, \fBwrite\fP = 4, \fBmemoryOp\fP = 8, \fBsizeOp\fP = 16, \fBbytes\fP = 32 }"
.br
.ti -1c
.RI "enum \fBMEMSUFFIXES\fP : std::byte { \fBfbyte\fP = 1, \fBfhalfword\fP = 2, \fBfword\fP = 4, \fBfaddress\fP = 8, \fBsbyte\fP = 16, \fBshalfword\fP = 32, \fBsword\fP = 64, \fBsaddress\fP = 128 }"
.br
.ti -1c
.RI "enum \fBREGISTERMODIFIERS\fP : std::byte { \fBHIHW\fP = 16, \fBLOHW\fP = 32, \fBHIBY\fP = 64, \fBLOBY\fP = 128 }"
.br
.ti -1c
.RI "enum \fBregisterSize\fP : std::byte { \fBeightBit\fP = 1, \fBsixteenBit\fP = 2, \fBthirtyTwoBit\fP = 4, \fBaddressSize\fP = 8 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsetRegister\fP (\fBregister_t\fP &reg, \fBstd::word\fP w)"
.br
.ti -1c
.RI "\fBstd::word\fP \fBreadRegister\fP (\fBregister_t\fP &reg)"
.br
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBBBP::userspace::CTRLSUFFIXES\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIret \fP\fP
.TP
\fB\fIcall \fP\fP
.TP
\fB\fIcallp \fP\fP
.TP
\fB\fIsyscall \fP\fP
.TP
\fB\fIroutine \fP\fP
.TP
\fB\fIabsolute \fP\fP
.PP
Definition at line 47 of file Opcodes\&.h\&.
.PP
.nf
47                           : std::byte
48         {
49             ret = 1,
50             call = 2,
51             callp = 4,
52             syscall = 8,
53             routine = 16,
54             absolute = 32
55         };
.fi
.SS "enum \fBBBP::userspace::JMPSUFFIXES\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIjmproutine \fP\fP
.TP
\fB\fInegated \fP\fP
.TP
\fB\fIlessthan \fP\fP
.TP
\fB\fIgreaterthan \fP\fP
.TP
\fB\fIequalto \fP\fP
.TP
\fB\fIabsoluteJmp \fP\fP
.PP
Definition at line 69 of file Opcodes\&.h\&.
.PP
.nf
69                          : std::byte
70         {
71             jmproutine = 1,
72             negated = 2,
73             lessthan = 4,
74             greaterthan = 8,
75             equalto = 16,
76             absoluteJmp = 32
77         };
.fi
.SS "enum \fBBBP::userspace::LOGICSUFFIXES\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIbitwise \fP\fP
.TP
\fB\fIinplace \fP\fP
.PP
Definition at line 63 of file Opcodes\&.h\&.
.PP
.nf
63                            : std::byte
64         {
65             bitwise = 1,
66             inplace = 2
67         };
.fi
.SS "enum \fBBBP::userspace::MATHSUFFIXES\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIffloat \fP\fP
.TP
\fB\fIsfloat \fP\fP
.PP
Definition at line 57 of file Opcodes\&.h\&.
.PP
.nf
57                           : std::byte
58         {
59             ffloat = 1,
60             sfloat = 2,
61         };
.fi
.SS "enum \fBBBP::userspace::MEMSUFFIXES\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIfbyte \fP\fP
.TP
\fB\fIfhalfword \fP\fP
.TP
\fB\fIfword \fP\fP
.TP
\fB\fIfaddress \fP\fP
.TP
\fB\fIsbyte \fP\fP
.TP
\fB\fIshalfword \fP\fP
.TP
\fB\fIsword \fP\fP
.TP
\fB\fIsaddress \fP\fP
.PP
Definition at line 89 of file Opcodes\&.h\&.
.PP
.nf
89                          : std::byte
90         {
91             fbyte = 1,
92             fhalfword = 2,
93             fword = 4,
94             faddress = 8,
95             sbyte = 16,
96             shalfword = 32,
97             sword = 64,
98             saddress = 128
99         };
.fi
.SS "enum \fBBBP::userspace::OPCODES\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINIL \fP\fP
.TP
\fB\fISTACK \fP\fP
.TP
\fB\fICTRL \fP\fP
.TP
\fB\fIMEM \fP\fP
.TP
\fB\fIINC \fP\fP
.TP
\fB\fIDEC \fP\fP
.TP
\fB\fINEG \fP\fP
.TP
\fB\fIADD \fP\fP
.TP
\fB\fISUB \fP\fP
.TP
\fB\fIMUL \fP\fP
.TP
\fB\fIDIV \fP\fP
.TP
\fB\fIMOD \fP\fP
.TP
\fB\fILBS \fP\fP
.TP
\fB\fIRBS \fP\fP
.TP
\fB\fIOR \fP\fP
.TP
\fB\fIXOR \fP\fP
.TP
\fB\fIAND \fP\fP
.TP
\fB\fINOT \fP\fP
.TP
\fB\fIFLAG \fP\fP
.TP
\fB\fIJMP \fP\fP
.TP
\fB\fIJMPZ \fP\fP
.TP
\fB\fIJMPC \fP\fP
.TP
\fB\fIPAGE \fP\fP
.TP
\fB\fISIGNAL \fP\fP
.TP
\fB\fIHALT \fP\fP
.PP
Definition at line 11 of file Opcodes\&.h\&.
.PP
.nf
11                      : std::byte
12         {
13             NIL = 0,
14             STACK = 1,
15             CTRL = 2,
16             MEM = 3,
17             INC = 4,
18             DEC = 5,
19             NEG = 6,
20             ADD = 7,
21             SUB = 8,
22             MUL = 9,
23             DIV = 10,
24             MOD = 11,
25             LBS = 12,
26             RBS = 13,
27             OR = 14,
28             XOR = 15,
29             AND = 16,
30             NOT = 17,
31             FLAG = 18,
32             JMP = 19,
33             JMPZ = 20,
34             JMPC = 21,
35             PAGE = 22,
36             SIGNAL = 23,
37             HALT = 24
38         };
.fi
.SS "enum \fBBBP::userspace::PAGESUFFIXES\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIassign \fP\fP
.TP
\fB\fIread \fP\fP
.TP
\fB\fIwrite \fP\fP
.TP
\fB\fImemoryOp \fP\fP
.TP
\fB\fIsizeOp \fP\fP
.TP
\fB\fIbytes \fP\fP
.PP
Definition at line 79 of file Opcodes\&.h\&.
.PP
.nf
79                           : std::byte
80         {
81             assign = 1,
82             read = 2,
83             write = 4,
84             memoryOp = 8,
85             sizeOp = 16,
86             bytes = 32
87         };
.fi
.SS "enum \fBBBP::userspace::REGISTERMODIFIERS\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIHIHW \fP\fP
.TP
\fB\fILOHW \fP\fP
.TP
\fB\fIHIBY \fP\fP
.TP
\fB\fILOBY \fP\fP
.PP
Definition at line 101 of file Opcodes\&.h\&.
.PP
.nf
101                                : std::byte
102         {
103             HIHW = 16,
104             LOHW = 32,
105             HIBY = 64,
106             LOBY = 128
107         };
.fi
.SS "enum \fBBBP::userspace::registerSize\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIeightBit \fP\fP
.TP
\fB\fIsixteenBit \fP\fP
.TP
\fB\fIthirtyTwoBit \fP\fP
.TP
\fB\fIaddressSize \fP\fP
.PP
Definition at line 13 of file Registers\&.h\&.
.PP
.nf
13                           : std::byte
14         {
15             eightBit = 1,
16             sixteenBit = 2,
17             thirtyTwoBit = 4,
18             addressSize = 8
19         };
.fi
.SS "enum \fBBBP::userspace::STACKSUFFIXES\fP : \fBstd::byte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIpush \fP\fP
.TP
\fB\fIpop \fP\fP
.TP
\fB\fIargument \fP\fP
.PP
Definition at line 40 of file Opcodes\&.h\&.
.PP
.nf
40                            : std::byte
41         {
42             push = 1,
43             pop = 2,
44             argument = 4
45         };
.fi
.SH "Function Documentation"
.PP 
.SS "\fBstd::word\fP BBP::userspace::readRegister (\fBregister_t\fP & reg)"

.PP
Referenced by BBP::smile_main()\&.
.SS "void BBP::userspace::setRegister (\fBregister_t\fP & reg, \fBstd::word\fP w)"

.PP
Referenced by BBP::smile_main()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for BBP Embedded kernel from the source code\&.
