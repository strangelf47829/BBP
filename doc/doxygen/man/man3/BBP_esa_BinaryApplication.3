.TH "BBP::esa::BinaryApplication" 3 "Fri Jan 26 2024" "Version 0.2.0" "BBP Embedded kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BBP::esa::BinaryApplication
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ELSABackend\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBinaryApplication\fP (\fBstd::conststring\fP fileName, \fBstd::size_t\fP extraSegments, \fBstd::size_t\fP extraSections, \fBstd::size_t\fP extraSymbols)"
.br
.ti -1c
.RI "void \fBaddDataToSection\fP (\fBstd::index_t\fP, \fBdataEntry\fP &)"
.br
.ti -1c
.RI "void \fBaddSymbol\fP (\fBdataEntry\fP &, \fBstd::conststring\fP)"
.br
.ti -1c
.RI "void \fBaddSymbol\fP (\fBdataEntry\fP &, \fBstd::conststring\fP, \fBstd::index_t\fP)"
.br
.ti -1c
.RI "void \fBemitSymbol\fP (\fBstd::index_t\fP, \fBdataEntry\fP &, \fBstd::conststring\fP, \fBstd::hash_t\fP, \fBstd::index_t\fP)"
.br
.ti -1c
.RI "bool \fBemitSymbolHash\fP (\fBstd::hash_t\fP hash, \fBstd::index_t\fP symbol)"
.br
.ti -1c
.RI "void \fBsetSource\fP (\fBstd::conststring\fP)"
.br
.ti -1c
.RI "void \fBappendSymbols\fP (\fBstd::index_t\fP)"
.br
.ti -1c
.RI "void \fBmangle\fP (\fBstd::conststring\fP name, \fBstd::Lexer::lex_thing\fP &thing, \fBdataEntry\fP &entry)"
.br
.ti -1c
.RI "void \fBsave\fP ()"
.br
.ti -1c
.RI "void \fBclose\fP ()"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBstd::ELF::ELFBuilder\fP \fBbuilder\fP"
.br
.ti -1c
.RI "\fBstd::Stack\fP< \fBstd::string_element\fP > \fBbuilderStack\fP"
.br
.ti -1c
.RI "\fBstd::FILE\fP \fBfile\fP"
.br
.ti -1c
.RI "\fBstd::static_string\fP< 128 > \fBmangledPage\fP"
.br
.ti -1c
.RI "\fBstd::Stack\fP< \fBstd::string_element\fP > \fBmangled\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 58 of file ELSABackend\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BBP::esa::BinaryApplication::BinaryApplication (\fBstd::conststring\fP fileName, \fBstd::size_t\fP extraSegments, \fBstd::size_t\fP extraSections, \fBstd::size_t\fP extraSymbols)"

.PP
Definition at line 5 of file Builder\&.cpp\&.
.PP
.nf
6     :
7     builder(std::activemem, extraSegments, 14 + extraSections, 1 + extraSymbols),
8     builderStack(&builder\&.file, std::seqlen(builder\&.file)),
9     file(builderStack, name),
10     mangled(&mangledPage, 128)
11 {
12     // Form the standard stuff
13     builder\&.formStandard(255, 255, 255, 255);
14 }
.fi
.PP
References builder, and BBP::std::ELF::ELFBuilder::formStandard()\&.
.SH "Member Function Documentation"
.PP 
.SS "void BBP::esa::BinaryApplication::addDataToSection (\fBstd::index_t\fP section, \fBesa::dataEntry\fP & entry)"

.PP
Definition at line 16 of file Builder\&.cpp\&.
.PP
.nf
17 {
18 
19     // If the section has a size of 0, append then recalculate
20     if (builder\&.sections[section]\&.stack\&.max_elements == 0)
21     {
22         builder\&.sections[section]\&.Append(entry\&.size);
23         builder\&.sections[section]\&.size(entry\&.size);
24 
25         // Then recalculate offsets only for sections and headers after this one
26         builder\&.recalculateOffsets(builder\&.sections[section]\&.offset(), entry\&.size);
27     }
28 
29 
30     // Get offset within section
31     entry\&.offset = builder\&.sections[section]\&.stack\&.atElement;
32     entry\&.elfData = &builder\&.sections[section]\&.stack[entry\&.offset];
33 
34     // If the section offset is bigger than the requested data,
35     if (entry\&.offset + entry\&.size > builder\&.sections[section]\&.stack\&.max_elements)
36     {
37         // If section does not have shentsize, do this
38         if (builder\&.sections[section]\&.entsize() == 0)
39             builder\&.sections[section]\&.Extend(entry\&.size > 128 ? entry\&.size : 128);
40         else
41         {
42             // Otherwise, just print something out
43             std::word deficit = entry\&.offset + entry\&.size - builder\&.sections[section]\&.stack\&.max_elements;
44             std::word esize = builder\&.sections[section]\&.entsize();
45 
46             // Calculate the amount of times entsize needs to be expanded
47             std::halfword leftOver = deficit % esize;
48             std::word count = (deficit / esize) + !!(leftOver);
49             builder\&.sections[section]\&.Extend(count * esize);
50         }
51     }
52 
53     // Then write the data, if it exists\&.
54     Goto::Hell();
55     if (entry\&.data != nullptr)
56         for (std::index_t idx = 0; idx < entry\&.size; idx++)
57             builder\&.sections[section]\&.stack << entry\&.data[idx];
58     else
59         builder\&.sections[section]\&.stack\&.atElement += entry\&.size; // If it doesn't, just artificially move the stack\&.
60 }
.fi
.PP
References BBP::esa::dataEntry::data, BBP::esa::dataEntry::elfData, Goto::Hell(), BBP::esa::dataEntry::offset, and BBP::esa::dataEntry::size\&.
.SS "void BBP::esa::BinaryApplication::addSymbol (\fBesa::dataEntry\fP & entry, \fBstd::conststring\fP name)"

.PP
Definition at line 62 of file Builder\&.cpp\&.
.PP
.nf
63 {
64     // Get next symbol
65     entry\&.symbol = builder\&.symbols\&.atElement;
66     builder\&.symbols\&.atElement++;
67 
68     // Rename symbol to name
69     builder\&.renameSymbol(entry\&.symbol, name);
70 
71     // Also save data size
72     builder\&.symbols[entry\&.symbol]\&.size(entry\&.size);
73 
74     // Then set type
75     builder\&.symbols[entry\&.symbol]\&.info(entry\&.type);
76 
77 }
.fi
.PP
References BBP::esa::dataEntry::size, BBP::esa::dataEntry::symbol, and BBP::esa::dataEntry::type\&.
.SS "void BBP::esa::BinaryApplication::addSymbol (\fBesa::dataEntry\fP & entry, \fBstd::conststring\fP name, \fBstd::index_t\fP _override)"

.PP
Definition at line 79 of file Builder\&.cpp\&.
.PP
.nf
80 {
81     // Get next symbol
82     entry\&.symbol = _override;
83 
84     // Rename symbol to name
85     builder\&.renameSymbol(entry\&.symbol, name);
86 
87     // Also save data size
88     builder\&.symbols[entry\&.symbol]\&.size(entry\&.size);
89 
90     // Then set type
91     builder\&.symbols[entry\&.symbol]\&.info(entry\&.type);
92 
93 }
.fi
.PP
References BBP::esa::dataEntry::size, BBP::esa::dataEntry::symbol, and BBP::esa::dataEntry::type\&.
.SS "void BBP::esa::BinaryApplication::appendSymbols (\fBstd::index_t\fP n)"

.PP
Definition at line 102 of file Builder\&.cpp\&.
.PP
.nf
103 {
104     // Save atElement
105     std::index_t atElement = builder\&.symbols\&.atElement;
106 
107     // Extend symbol table
108     builder\&._symtab()\&.Extend(ELF_SYMBOL_ENTRYSIZE * n);
109     builder\&.symbols\&.Extend(builder\&.allocator, n);
110     builder\&.symbolCount += n;
111     builder\&._symtab()\&.info(builder\&.symbolCount);
112 
113     // Set ELF Info
114     for (std::index_t index = 0; index < n; index++)
115     {
116         builder\&.symbols[builder\&.symbolCount - 1 - index]\&.elf = &builder;
117         builder\&.symbols[builder\&.symbolCount - 1 - index]\&.header\&.bytes = ELF_SYMBOL_ENTRYSIZE;
118         builder\&.symbols[builder\&.symbolCount - 1 - index]\&.header\&.data = builder\&.sections[builder\&.symtab]\&.data\&.data + ELF_SYMBOL_ENTRYSIZE * (builder\&.symbolCount - 1 - index);
119     }
120 
121     // Extend hash table
122     builder\&._hashtab()\&.Extend((sizeof(std::word) / sizeof(std::byte)) * n);
123     builder\&.hashChainCount = builder\&.symbolCount;
124 
125     // Testing
126     builder\&._symtab()\&.stack\&.atElement = 6 * 16;
127 
128     // Restore atElement
129     builder\&.symbols\&.atElement = atElement;
130 }
.fi
.PP
References ELF_SYMBOL_ENTRYSIZE, and BBP::Locale::Japanese::n\&.
.SS "void BBP::esa::BinaryApplication::close ()"

.PP
Definition at line 213 of file Builder\&.cpp\&.
.PP
.nf
214 {
215     builder\&.close();
216     file\&.close();
217 }
.fi
.SS "void BBP::esa::BinaryApplication::emitSymbol (\fBstd::index_t\fP section, \fBesa::dataEntry\fP & entry, \fBstd::conststring\fP name, \fBstd::hash_t\fP hash, \fBstd::index_t\fP _override)"

.PP
Definition at line 132 of file Builder\&.cpp\&.
.PP
.nf
133 {
134     // Check for symbol memory uniqueness, since an overwrite could loose data
135     if (builder\&.symbols[entry\&.symbol]\&.isMemUnique)
136         throw std::exception("Symbol overwrite looses unique data\&.", EADDRINUSE);
137 
138     // If overriding, override\&. Otherwise, dont\&. LOL
139     if (_override)
140         addSymbol(entry, name, _override);
141     else
142     {
143         // If symbol has reached max, extend symbols
144         if (builder\&.symbols\&.atElement >= builder\&.symbolCount)
145             appendSymbols(6);
146 
147         // Add symbol
148         addSymbol(entry, name);
149     }
150 
151     // Write data to section, if section is not equal to 0
152     if (section)
153         addDataToSection(section, entry);
154 
155     // Then also update the remaining values
156     builder\&.symbols[entry\&.symbol]\&.shndx(section);
157     builder\&.symbols[entry\&.symbol]\&.value(entry\&.offset);
158     builder\&.symbols[entry\&.symbol]\&.data = std::string(builder\&.symbols[entry\&.symbol]\&.size(), entry\&.elfData);
159 
160     // Emit symbol hash\&.
161     bool couldHash = emitSymbolHash(hash, entry\&.symbol);
162 
163     if (!couldHash)
164         std::printf("ELF Builder: Failed to hash symbol\n");
165 
166 }
.fi
.PP
References EADDRINUSE, BBP::esa::dataEntry::elfData, BBP::std::exception(), BBP::Locale::Japanese::hash, BBP::esa::dataEntry::offset, BBP::std::printf(), and BBP::esa::dataEntry::symbol\&.
.SS "bool BBP::esa::BinaryApplication::emitSymbolHash (\fBstd::hash_t\fP hash, \fBstd::index_t\fP symbol)"

.PP
Definition at line 168 of file Builder\&.cpp\&.
.PP
.nf
169 {
170     // Create page for 32 bit sized values
171     std::PAGE<std::word> hashTable(2 + builder\&.hashBucketCount + builder\&.hashChainCount, (std::word *)builder\&.sections[builder\&.hashtab]\&.data\&.data);
172 
173     // Then also write the has to the corresponding hash table\&.
174     std::word bucket = hash % builder\&.hashBucketCount;
175 
176     // Check what is at bucket
177     std::word bucketValue = std::read(&hashTable, 2 + bucket);
178 
179     // If value is 0, start an new bucket and stop
180     if (bucketValue == 0)
181     {
182         std::write(&hashTable, symbol, 2 + bucket);
183         return true;
184     }
185 
186     // Read chain value
187     for (std::index_t chainIndex = std::read(&hashTable, 2 + bucket); chainIndex < builder\&.hashChainCount; chainIndex++)
188     {
189         // Read value at chain
190         std::word chainValue = std::read(&hashTable, 2 + builder\&.hashBucketCount + chainIndex);
191 
192         // If chain has value, continue at next chain
193         if (chainValue)
194         {
195             chainIndex = chainValue - 1;
196             continue;
197         }
198 
199         // Empty symbol, write index then return
200         std::write(&hashTable, symbol, 2 + builder\&.hashBucketCount + chainIndex);
201         return true;
202     }
203 
204     // Failed to hash
205     return false;
206 }
.fi
.PP
References BBP::Locale::Japanese::hash, BBP::std::read(), and BBP::std::write()\&.
.SS "void BBP::esa::BinaryApplication::mangle (\fBstd::conststring\fP name, \fBstd::Lexer::lex_thing\fP & thing, \fBdataEntry\fP & entry)"

.PP
Definition at line 5 of file EABI\&.cpp\&.
.PP
.nf
6 {
7     // Just a test
8     mangled\&.page = &mangledPage;
9 
10     // Clear mangled string
11     mangled\&.atElement = 0;
12 
13     // Then write '_Z'
14     mangled << "_Z";
15 
16     // Calculate the length of the string
17     std::size_t length = std::strlen(str);
18 
19     // Prepend length
20     mangled < length;
21 
22     // Then write name
23     mangled << str;
24 
25     if ((entry\&.type & std::ELF::SYM_OBJECT || thing\&.subtype & SYMTACC_VIRTUAL) && !(entry\&.type & std::ELF::SYM_FUNC))
26     {
27         // If variable, do the following:
28 
29         // If the thing is virtual, do the following
30         if (thing\&.subtype & SYMTACC_VIRTUAL)
31         {
32 
33             // Append the size of the object
34             switch (thing\&.subtype & 0b111111100000)
35             {
36             case SYMTSZ_DN:
37             case SYMTSZ_DB:
38                 mangled << "Z1";
39                 break;
40             case SYMTSZ_DH:
41                 mangled << "Z2";
42                 break;
43             case SYMTSZ_DA:
44             case SYMTSZ_DW:
45             case SYMTSZ_DI:
46             case SYMTSZ_NIL:
47             default:
48                 mangled << "Z4";
49                 break;
50             }
51 
52             // Then append NData if this is also the data that goes into \&.bss
53             if (entry\&.type != std::ELF::SYM_LOCAL)
54                 mangled << "NData";
55         }
56         else
57         {
58             // Otherwise, just append the size of the thing (in bytes)
59             switch (thing\&.subtype & 0b111111100000)
60             {
61             case SYMTSZ_DN:
62             case SYMTSZ_DB:
63                 mangled << "Z1";
64                 break;
65             case SYMTSZ_DH:
66                 mangled << "Z2";
67                 break;
68             case SYMTSZ_DA:
69             case SYMTSZ_DW:
70             case SYMTSZ_DI:
71             case SYMTSZ_NIL:
72             default:
73                 mangled << "Z4";
74                 break;
75             }
76         }
77         
78     }
79     else if (entry\&.type & std::ELF::SYM_FUNC)
80     {
81         // If procedure, add 'P'
82         mangled << "P";
83 
84         // Then write the amount of arguments it takes\&.
85         mangled < thing\&.subtype;
86     }
87 
88     // Then 0 terminate
89     mangled << '\0';
90 
91 }
.fi
.PP
References BBP::std::Stack< K >::atElement, mangled, mangledPage, BBP::std::Stack< K >::page, BBP::std::strlen(), BBP::std::Lexer::lex_thing::subtype, BBP::std::ELF::SYM_FUNC, BBP::std::ELF::SYM_LOCAL, BBP::std::ELF::SYM_OBJECT, BBP::esa::SYMTACC_VIRTUAL, BBP::esa::SYMTSZ_DA, BBP::esa::SYMTSZ_DB, BBP::esa::SYMTSZ_DH, BBP::esa::SYMTSZ_DI, BBP::esa::SYMTSZ_DN, BBP::esa::SYMTSZ_DW, BBP::esa::SYMTSZ_NIL, and BBP::esa::dataEntry::type\&.
.SS "void BBP::esa::BinaryApplication::save ()"

.PP
Definition at line 208 of file Builder\&.cpp\&.
.PP
.nf
209 {
210     file\&.writeFileToDisk();
211 }
.fi
.SS "void BBP::esa::BinaryApplication::setSource (\fBstd::conststring\fP name)"

.PP
Definition at line 95 of file Builder\&.cpp\&.
.PP
.nf
96 {
97     dataEntry source("", std::ELF::SYM_FILE);
98     addSymbol(source, name);
99     builder\&.symbols[source\&.symbol]\&.shndx(std::ELF::SHN_ABS);
100 }
.fi
.PP
References BBP::std::ELF::SHN_ABS, BBP::std::ELF::SYM_FILE, and BBP::esa::dataEntry::symbol\&.
.SH "Field Documentation"
.PP 
.SS "\fBstd::ELF::ELFBuilder\fP BBP::esa::BinaryApplication::builder"

.PP
Definition at line 87 of file ELSABackend\&.h\&.
.PP
Referenced by BBP::esa::ACTION(), BinaryApplication(), and BBP::esa::esaProcessor::setProcedureAddress()\&.
.SS "\fBstd::Stack\fP<\fBstd::string_element\fP> BBP::esa::BinaryApplication::builderStack"

.PP
Definition at line 88 of file ELSABackend\&.h\&.
.SS "\fBstd::FILE\fP BBP::esa::BinaryApplication::file"

.PP
Definition at line 89 of file ELSABackend\&.h\&.
.SS "\fBstd::Stack\fP<\fBstd::string_element\fP> BBP::esa::BinaryApplication::mangled"

.PP
Definition at line 93 of file ELSABackend\&.h\&.
.PP
Referenced by mangle()\&.
.SS "\fBstd::static_string\fP<128> BBP::esa::BinaryApplication::mangledPage"

.PP
Definition at line 92 of file ELSABackend\&.h\&.
.PP
Referenced by mangle()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for BBP Embedded kernel from the source code\&.
