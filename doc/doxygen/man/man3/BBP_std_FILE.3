.TH "BBP::std::FILE" 3 "Fri Jan 26 2024" "Version 0.2.0" "BBP Embedded kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BBP::std::FILE
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <FileSys\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFILE\fP ()"
.br
.ti -1c
.RI "\fBFILE\fP (\fBstd::PATH\fP)"
.br
.ti -1c
.RI "\fBFILE\fP (\fBstd::conststring\fP)"
.br
.ti -1c
.RI "\fBFILE\fP (\fBstd::Stack\fP< \fBstd::string_element\fP > &\fBdata\fP, \fBstd::conststring\fP path)"
.br
.ti -1c
.RI "\fBFileNode\fP * \fBdata\fP ()"
.br
.ti -1c
.RI "\fBstd::Stack\fP< \fBstd::string_element\fP > & \fBb\fP ()"
.br
.ti -1c
.RI "bool \fBis_open\fP ()"
.br
.ti -1c
.RI "bool \fBon_disk\fP ()"
.br
.ti -1c
.RI "void \fBclose\fP ()"
.br
.ti -1c
.RI "\fBFILE\fP & \fBwrite\fP (\fBstd::conststring\fP str)"
.br
.ti -1c
.RI "\fBFILE\fP & \fBwrite\fP (\fBstd::c_string\fP &str)"
.br
.ti -1c
.RI "\fBFILE\fP & \fBwrite\fP (\fBstd::string\fP &str)"
.br
.ti -1c
.RI "\fBFILE\fP & \fBfinish\fP (\fBstd::conststring\fP str)"
.br
.ti -1c
.RI "\fBFILE\fP & \fBfinish\fP (\fBstd::c_string\fP &str)"
.br
.ti -1c
.RI "\fBFILE\fP & \fBfinish\fP (\fBstd::string\fP &str)"
.br
.ti -1c
.RI "\fBFILE\fP & \fBfinish\fP ()"
.br
.ti -1c
.RI "bool \fBdoesFileExistOnDisk\fP (\fBstd::PATH\fP &)"
.br
.ti -1c
.RI "\fBstd::size_t\fP \fBgetFileSizeFromDisk\fP (\fBstd::PATH\fP &)"
.br
.ti -1c
.RI "\fBstd::size_t\fP \fBreadFileFromDisk\fP (\fBstd::FileNode\fP *, \fBstd::PATH\fP &)"
.br
.ti -1c
.RI "void \fBwriteFileToDisk\fP (\fBstd::PATH\fP &)"
.br
.ti -1c
.RI "void \fBwriteFileToDisk\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBstd::index_t\fP \fBcheckIfIsOpen\fP (\fBstd::conststring\fP path)"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBfindClosedFile\fP ()"
.br
.ti -1c
.RI "void \fBgetINodeIndex\fP (\fBstd::PATH\fP &)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fB_is_on_disk\fP = false"
.br
.ti -1c
.RI "bool \fB_dealloc_page\fP = false"
.br
.ti -1c
.RI "bool \fB_loaded_intomem\fP = false"
.br
.ti -1c
.RI "bool \fB_unload_inode\fP = false"
.br
.ti -1c
.RI "\fBnoderef_t\fP \fBnode\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 100 of file FileSys\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BBP::std::FILE::FILE ()"

.PP
Definition at line 4 of file File\&.cpp\&.
.PP
.nf
5     : node(max_open_files)
6 {
7     // Empty file, no nothing\&.
8 }
.fi
.SS "BBP::std::FILE::FILE (\fBstd::PATH\fP path)"

.PP
Definition at line 55 of file File\&.cpp\&.
.PP
.nf
56 {
57     getINodeIndex(path);
58 
59     // Check if file exists on disk
60     bool exists = doesFileExistOnDisk(path);
61 
62     // If file does not exist on disk or in memory, throw error
63     if (!is_open() && !on_disk())
64         throw std::exception("ERR_FILE_NOEXIST", ENOENT);
65 
66     // Only read from disk if file exists on disk, but is also not already in memory
67     if (exists && !is_open())
68     {
69         // Read file Size
70         std::size_t fileSize = getFileSizeFromDisk(path);
71 
72         // Create new node
73         std::fileTable\&.data[this->node] = std::FileNode(std::activemem, fileSize + 1, path);
74         _dealloc_page = true;
75         _unload_inode = true;
76 
77         // Read data from file
78         readFileFromDisk(&std::fileTable\&.data[this->node], path);
79     }
80 
81     std::fileTable\&.data[this->node]\&.fileData\&.page->prevPage = nullptr;
82     std::fileTable\&.data[this->node]\&.fileData\&.page->nextPage = nullptr;
83 
84 }
.fi
.PP
References BBP::std::activemem, ENOENT, BBP::std::exception(), and BBP::std::fileTable\&.
.SS "BBP::std::FILE::FILE (\fBstd::conststring\fP _path)"

.PP
Definition at line 87 of file File\&.cpp\&.
.PP
.nf
88     : FILE(std::PATH(_path))
89 {
90 }
.fi
.SS "BBP::std::FILE::FILE (\fBstd::Stack\fP< \fBstd::string_element\fP > & data, \fBstd::conststring\fP path)"

.PP
Definition at line 10 of file File\&.cpp\&.
.PP
.nf
11 {
12     // Get INode info
13     std::PATH p(path);
14     getINodeIndex(p);
15 
16     // Check if it already exists
17     _unload_inode = !is_open();
18 
19 #ifndef BBP_STDLIB_FILESYS_OVERWRITEEXISTINGFILES
20     // If BBP_STDLIB_FILESYS_OVERWRITEEXISTINGFILES is set, check if file already exists and throw exception if it does
21     if (doesFileExistOnDisk(_path))
22         throw std::exception("FILE_ALREADY_EXISTS", EEXIST);
23 #endif
24 
25     // Create file node at corresponding INode
26     std::fileTable\&.data[this->node] = BBP::std::FileNode(data, BBP::std::primaryVolume, path);
27 }
.fi
.PP
References EEXIST, BBP::std::exception(), BBP::std::fileTable, and BBP::std::primaryVolume\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBBBP::std::Stack\fP< \fBBBP::std::string_element\fP > & BBP::std::FILE::b ()"

.PP
Definition at line 168 of file File\&.cpp\&.
.PP
.nf
169 {
170     return data()->fileData;
171 }
.fi
.PP
Referenced by BBP::badapple_main(), BBP::std::R2D::GetFontFromFile(), BBP::std::Lexer::lex_context::parseFile(), and BBP::smile_main()\&.
.SS "\fBBBP::std::index_t\fP BBP::std::FILE::checkIfIsOpen (\fBstd::conststring\fP path)\fC [private]\fP"

.PP
Definition at line 92 of file File\&.cpp\&.
.PP
.nf
93 {
94     // Get path hash
95     std::hash_t hash = std::strhsh(path);
96 
97     // Fetch each table hash
98     for (std::index_t idx = 0; idx < std::fileTable\&.dataSize; idx++)
99     {
100         // Get reference to node
101         std::FileNode *node = &__UNSAFE__(read)(&std::fileTable, idx);
102 
103         // If entry is nullptr, skip
104         if (node == nullptr)
105             continue;
106 
107         // Get hash
108         std::hash_t file_hash = node->filePathHash;
109 
110         if (hash == file_hash)
111             return idx;
112     }
113 
114     // Nothing found, return false\&.
115     return std::fileTable\&.dataSize;
116 }
.fi
.PP
References __UNSAFE__, BBP::std::FileNode::filePathHash, BBP::std::fileTable, BBP::Locale::Japanese::hash, BBP::std::read(), and BBP::std::strhsh()\&.
.SS "void BBP::std::FILE::close ()"

.PP
Definition at line 146 of file File\&.cpp\&.
.PP
.nf
147 {
148     // Deallocate the page if marked allocated
149     if (_dealloc_page)
150     {
151         BBP::std::activemem->free(data()->fileData\&.page->data);
152         BBP::std::activemem->_delete(data()->fileData\&.page);
153     }
154 
155     if (_unload_inode)
156         BBP::std::fileTable\&.data[this->node]\&.fileData\&.page = nullptr;
157 
158     this->node = BBP::std::fileTable\&.dataSize;
159 }
.fi
.PP
References BBP::std::ResourceManager::_delete(), BBP::std::activemem, BBP::std::fileTable, and BBP::std::ResourceManager::free()\&.
.PP
Referenced by BBP::badapple_main(), BBP::std::R2D::GetFontFromFile(), BBP::esa::esaProcessor::includeFile(), BBP::std::Lexer::lex_context::parseFile(), and BBP::smile_main()\&.
.SS "\fBBBP::std::FileNode\fP * BBP::std::FILE::data ()"

.PP
Definition at line 141 of file File\&.cpp\&.
.PP
.nf
142 {
143     return &std::read(&std::fileTable, this->node);
144 }
.fi
.PP
References BBP::std::fileTable, and BBP::std::read()\&.
.PP
Referenced by BBP::std::fprintf(), and BBP::shell()\&.
.SS "bool BBP::std::FILE::doesFileExistOnDisk (\fBstd::PATH\fP &)"

.SS "\fBBBP::std::index_t\fP BBP::std::FILE::findClosedFile ()\fC [private]\fP"

.PP
Definition at line 118 of file File\&.cpp\&.
.PP
.nf
119 {
120     // Fetch each table hash
121     for (std::index_t idx = 0; idx < std::fileTable\&.dataSize; idx++)
122     {
123         // Get reference to node
124         std::FileNode *node = &__UNSAFE__(read)(&std::fileTable, idx);
125 
126         // If entry is nullptr, skip
127         if (node == nullptr)
128             return idx;
129 
130         // Get hash
131         std::hash_t file_hash = node->filePathHash;
132 
133         if (file_hash == 0)
134             return idx;
135     }
136 
137     // Nothing found, return false\&.
138     return std::fileTable\&.dataSize;
139 }
.fi
.PP
References __UNSAFE__, BBP::std::FileNode::filePathHash, BBP::std::fileTable, and BBP::std::read()\&.
.SS "\fBBBP::std::FILE\fP & BBP::std::FILE::finish ()"

.PP
Definition at line 209 of file File\&.cpp\&.
.PP
.nf
210 {
211     b() <<= std::endl;
212     return *this;
213 }
.fi
.PP
References BBP::std::endl\&.
.SS "\fBBBP::std::FILE\fP & BBP::std::FILE::finish (\fBstd::c_string\fP & str)"

.PP
Definition at line 197 of file File\&.cpp\&.
.PP
.nf
198 {
199     b() <<= str;
200     return *this;
201 }
.fi
.SS "\fBBBP::std::FILE\fP & BBP::std::FILE::finish (\fBstd::conststring\fP str)"

.PP
Definition at line 191 of file File\&.cpp\&.
.PP
.nf
192 {
193     b() <<= str;
194     return *this;
195 }
.fi
.SS "\fBBBP::std::FILE\fP & BBP::std::FILE::finish (\fBstd::string\fP & str)"

.PP
Definition at line 203 of file File\&.cpp\&.
.PP
.nf
204 {
205     b() <<= str;
206     return *this;
207 }
.fi
.SS "\fBstd::size_t\fP BBP::std::FILE::getFileSizeFromDisk (\fBstd::PATH\fP &)"

.SS "void BBP::std::FILE::getINodeIndex (\fBstd::PATH\fP & path)\fC [private]\fP"

.PP
Definition at line 29 of file File\&.cpp\&.
.PP
.nf
30 {
31     // Resolve names
32     path\&.makeAbsolutePath(std::workingDirectory);
33 
34     // Check if file is open
35     BBP::std::index_t idx = checkIfIsOpen(path\&.relName());
36 
37     if (idx == std::fileTable\&.dataSize)
38     {
39         // Look for next empty file
40         std::index_t emptyIndex = findClosedFile();
41 
42         // Check if there are empty files
43         if (emptyIndex == std::fileTable\&.dataSize)
44             throw std::exception("ERR_NO_EMPTYFILENODE", ENFILE);
45 
46         // Save node index
47         this->node = emptyIndex;
48     }
49     else
50     {
51         this->node = idx;
52     }
53 }
.fi
.PP
References ENFILE, BBP::std::exception(), BBP::std::fileTable, BBP::std::PATH::makeAbsolutePath(), BBP::std::PATH::relName(), and BBP::std::workingDirectory\&.
.SS "bool BBP::std::FILE::is_open ()"

.PP
Definition at line 161 of file File\&.cpp\&.
.PP
.nf
162 {
163     if (data() == nullptr)
164         return false;
165     return BBP::std::fileTable\&.data[this->node]\&.fileData\&.page != nullptr;
166 }
.fi
.PP
References BBP::std::fileTable\&.
.PP
Referenced by BBP::std::fprintf()\&.
.SS "bool BBP::std::FILE::on_disk ()\fC [inline]\fP"

.PP
Definition at line 115 of file FileSys\&.h\&.
.PP
.nf
115 { return _is_on_disk; }
.fi
.PP
References _is_on_disk\&.
.SS "\fBstd::size_t\fP BBP::std::FILE::readFileFromDisk (\fBstd::FileNode\fP *, \fBstd::PATH\fP &)"

.SS "\fBBBP::std::FILE\fP & BBP::std::FILE::write (\fBstd::c_string\fP & str)"

.PP
Definition at line 179 of file File\&.cpp\&.
.PP
.nf
180 {
181     b() << str;
182     return *this;
183 }
.fi
.SS "\fBBBP::std::FILE\fP & BBP::std::FILE::write (\fBstd::conststring\fP str)"

.PP
Definition at line 173 of file File\&.cpp\&.
.PP
.nf
174 {
175     b() << str;
176     return *this;
177 }
.fi
.SS "\fBBBP::std::FILE\fP & BBP::std::FILE::write (\fBstd::string\fP & str)"

.PP
Definition at line 185 of file File\&.cpp\&.
.PP
.nf
186 {
187     b() << str;
188     return *this;
189 }
.fi
.SS "void BBP::std::FILE::writeFileToDisk ()"

.SS "void BBP::std::FILE::writeFileToDisk (\fBstd::PATH\fP &)"

.SH "Field Documentation"
.PP 
.SS "bool BBP::std::FILE::_dealloc_page = false\fC [private]\fP"

.PP
Definition at line 141 of file FileSys\&.h\&.
.SS "bool BBP::std::FILE::_is_on_disk = false\fC [private]\fP"

.PP
Definition at line 140 of file FileSys\&.h\&.
.PP
Referenced by on_disk()\&.
.SS "bool BBP::std::FILE::_loaded_intomem = false\fC [private]\fP"

.PP
Definition at line 142 of file FileSys\&.h\&.
.SS "bool BBP::std::FILE::_unload_inode = false\fC [private]\fP"

.PP
Definition at line 143 of file FileSys\&.h\&.
.SS "\fBnoderef_t\fP BBP::std::FILE::node\fC [private]\fP"

.PP
Definition at line 145 of file FileSys\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for BBP Embedded kernel from the source code\&.
