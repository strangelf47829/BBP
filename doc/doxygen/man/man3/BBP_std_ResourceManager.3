.TH "BBP::std::ResourceManager" 3 "Fri Jan 26 2024" "Version 0.2.0" "BBP Embedded kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BBP::std::ResourceManager
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Resources\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBResourceManager\fP ()"
.br
.ti -1c
.RI "void * \fBmalloc\fP (\fBstd::size_t\fP)"
.br
.ti -1c
.RI "void * \fBcalloc\fP (\fBstd::size_t\fP, \fBstd::size_t\fP)"
.br
.ti -1c
.RI "template<typename T > T * \fBadd_object\fP (T *ptr)"
.br
.ti -1c
.RI "void \fBadd_alloc\fP (void *)"
.br
.ti -1c
.RI "void \fBfree\fP (void *)"
.br
.ti -1c
.RI "void \fBmark_deleted\fP (void *)"
.br
.ti -1c
.RI "void \fB_delete\fP (void *)"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBfreeAll\fP ()"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBdeleteAll\fP ()"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBdealloc\fP ()"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBstd::size_t\fP \fBtotalAllocations\fP = 0"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBfree\fP (void *, \fBstd::index_t\fP)"
.br
.ti -1c
.RI "void \fB_delete\fP (\fBstd::index_t\fP)"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBfind_next_empty_alloc\fP ()"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBfind_next_empty_object\fP ()"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBfind_Alloc_pointer\fP (void *)"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBfind_Object_pointer\fP (void *)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBstd::index_t\fP \fBinvalidAllocationIndex\fP"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBnextAllocationAvailable\fP"
.br
.ti -1c
.RI "\fBstd::STATIC_PAGE\fP< void *, \fBmax_allocations\fP > \fBallocations\fP"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBinvalidObjectIndex\fP"
.br
.ti -1c
.RI "\fBstd::index_t\fP \fBnextObjectAvailable\fP"
.br
.ti -1c
.RI "\fBstd::STATIC_PAGE\fP< \fBAbstractGCEntry\fP *, \fBmax_objects\fP > \fBobjects\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 50 of file Resources\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BBP::std::ResourceManager::ResourceManager ()"

.PP
Definition at line 329 of file Resources\&.cpp\&.
.PP
.nf
330 {
331     // I should really remove that pesky lvalue restriction\&.\&.\&.\&.\&. Oh well, idc
332     void *nul = nullptr;
333     AbstractGCEntry *nul2 = nullptr;
334 
335     // Zero initialize allocations
336     for (std::index_t t = 0; t < allocations\&.dataSize; t++)
337         write(&allocations, nul, t);
338 
339     // Zero initialize objects
340     for (std::index_t t = 0; t < objects\&.dataSize; t++)
341         write(&objects, nul2, t);
342 
343     // Set invalid indicies
344     this->invalidAllocationIndex = allocations\&.dataSize;
345     this->invalidObjectIndex = objects\&.dataSize;
346 
347     // Zero-init next available things
348     this->nextAllocationAvailable = 0;
349     this->nextObjectAvailable = 0;
350 
351 }
.fi
.PP
References BBP::std::write()\&.
.SH "Member Function Documentation"
.PP 
.SS "void BBP::std::ResourceManager::_delete (\fBstd::index_t\fP ptrIndex)\fC [private]\fP"

.PP
Definition at line 125 of file Resources\&.cpp\&.
.PP
.nf
126 {
127     // If index invalid, throw sigsegv signal
128     if (ptrIndex == this->invalidObjectIndex)
129     {
130         __SIGNAL__(SIGSEGV);
131     }
132 
133     // Pointer exists, so delete it\&.
134     this->objects\&.data[ptrIndex]->_delete();
135     delete(this->objects\&.data[ptrIndex]);
136     this->objects\&.data[ptrIndex] = nullptr;
137 }
.fi
.PP
References __SIGNAL__, and BBP::std::SIGSEGV\&.
.SS "void BBP::std::ResourceManager::_delete (void * ptr)"

.PP
Definition at line 108 of file Resources\&.cpp\&.
.PP
.nf
109 {
110     // Check if pointer is not actually nullptr
111     if (ptr == nullptr)
112     {
113         // Attempting to free nullptr: Do nothing but output something to stderr
114         std::STDERR << "Attempt to delete nullptr was made\&." <<= std::endl;
115         return;
116     }
117 
118     // Attempt to find index of pointer
119     std::index_t ptrIndex = find_Object_pointer(ptr);
120 
121     // Call to internal _delete function
122     this->_delete(ptrIndex);
123 }
.fi
.PP
References BBP::std::endl, and BBP::std::STDERR\&.
.PP
Referenced by BBP::std::FILE::close(), BBP::esa::esaProcessor::discardAndClose(), BBP::std::execute(), and BBP::esa::esaProcessor::saveAndClose()\&.
.SS "void BBP::std::ResourceManager::add_alloc (void * ptr)"

.PP
Definition at line 44 of file Resources\&.cpp\&.
.PP
.nf
45 {
46     // See if allocation is possible
47     if (this->nextAllocationAvailable == this->invalidAllocationIndex)
48         throw std::exception("Could not register alloc'd data to Resource manager: Out of allocation space\&.", ENOMEM);
49 
50     // Store that write into next possible alloc
51     std::write(&this->allocations, ptr, this->nextAllocationAvailable);
52 
53     // Find next possible location
54     this->nextAllocationAvailable = find_next_empty_alloc();
55 }
.fi
.PP
References ENOMEM, BBP::std::exception(), and BBP::std::write()\&.
.PP
Referenced by malloc()\&.
.SS "template<typename T > T* BBP::std::ResourceManager::add_object (T * ptr)\fC [inline]\fP"

.PP
Definition at line 62 of file Resources\&.h\&.
.PP
.nf
63             {
64 
65                 // See if allocation is possible
66                 if (this->nextObjectAvailable == this->invalidObjectIndex)
67                     throw std::exception("Could not register new'd data to Resource manager: Out of allocation space\&.", ENOMEM);
68 
69                 // Store that write into next possible object
70 
71                 GCEntry<T> *entry = new GCEntry<T>();
72                 entry->ptr = ptr;
73                 this->objects\&.data[this->nextObjectAvailable] = entry;
74                 totalAllocations += sizeof(T);
75 
76                 // Find next possible location
77                 this->nextObjectAvailable = find_next_empty_object();
78 
79                 // Return ptr, in case it is needed for something
80                 return ptr;
81             }
.fi
.PP
References ENOMEM, BBP::std::exception(), find_next_empty_object(), invalidObjectIndex, nextObjectAvailable, objects, BBP::std::GCEntry< T >::ptr, and totalAllocations\&.
.PP
Referenced by BBP::std::execute(), and BBP::esa::esaProcessor::setupBackend()\&.
.SS "void * BBP::std::ResourceManager::calloc (\fBstd::size_t\fP count, \fBstd::size_t\fP size)"

.PP
Definition at line 26 of file Resources\&.cpp\&.
.PP
.nf
27 {
28     // See if allocation is possible
29     if (this->nextAllocationAvailable == this->invalidAllocationIndex)
30         throw std::exception("Could not allocate bytes to Resource manager: Out of allocation space\&.", ENOMEM);
31 
32     // Actually calloc data
33     void *data = std::ext_calloc(count, size);
34     this->totalAllocations += size * count;
35     //std::printf("(%p) Application allocated %u bytes during runtime\&. (calloc: %u)\n", this, totalAllocations, size * count);
36 
37     // Add that data
38     add_alloc(data);
39 
40     // Return data
41     return data;
42 }
.fi
.PP
References ENOMEM, BBP::std::exception(), and BBP::std::ext_calloc()\&.
.PP
Referenced by BBP::std::ELF::SectionBuilder::Append(), BBP::std::ELF::SegmentBuilder::Append(), BBP::std::ELF::ELFBuilder::ELFBuilder(), BBP::std::Stack< BBP::std::DIRECTORY >::Extend(), BBP::std::R2D::GetFontFromFile(), and BBP::std::R2D::newWindow()\&.
.SS "\fBBBP::std::index_t\fP BBP::std::ResourceManager::dealloc ()"

.PP
Definition at line 321 of file Resources\&.cpp\&.
.PP
.nf
322 {
323     std::index_t count = 0;
324     count += this->freeAll();
325     count += this->deleteAll();
326     return count;
327 }
.fi
.SS "\fBBBP::std::index_t\fP BBP::std::ResourceManager::deleteAll ()"

.PP
Definition at line 293 of file Resources\&.cpp\&.
.PP
.nf
294 {
295     // Keep track of objects that were delete'd
296     std::index_t deleteCount = 0;
297 
298     // Loop over each pointer
299     for (std::index_t idx = 0; idx < objects\&.dataSize; idx++)
300     {
301         // Check if pointer exists
302         if (!__UNSAFE__(std::read)(&objects, idx))
303             continue;
304 
305         // Read pointer
306         void *ptr = __UNSAFE__(std::read)(&objects, idx)->getRawPtr();
307 
308         // If ptr is nullptr, skip
309         if (ptr == nullptr)
310             continue;
311 
312         // Since this pointer has something, delete it\&. Also, since we know the index, just pass it\&.
313         this->_delete(idx);
314         deleteCount++;
315     }
316 
317     // Return the amount of things delete'd
318     return deleteCount;
319 }
.fi
.PP
References __UNSAFE__, and BBP::std::read()\&.
.PP
Referenced by BBP::badapple_main(), and BBP::std::execute()\&.
.SS "\fBBBP::std::index_t\fP BBP::std::ResourceManager::find_Alloc_pointer (void * ptr)\fC [private]\fP"

.PP
Definition at line 231 of file Resources\&.cpp\&.
.PP
.nf
232 {
233     // Loop over every pointer
234     for (std::index_t idx = 0; idx < allocations\&.dataSize; idx++)
235     {
236         // Read value stored at 'idx'
237         void *stored = __UNSAFE__(std::read)(&allocations, idx);
238 
239         // If 'stored' and 'ptr' are equal, return idx
240         if (stored == ptr)
241             return idx;
242     }
243 
244     // Nothing found, return invalid pointer
245     return invalidAllocationIndex;
246 }
.fi
.PP
References __UNSAFE__, and BBP::std::read()\&.
.SS "\fBBBP::std::index_t\fP BBP::std::ResourceManager::find_next_empty_alloc ()\fC [private]\fP"

.PP
Definition at line 139 of file Resources\&.cpp\&.
.PP
.nf
140 {
141     // Check if we are not already at free pointer
142     void *ptr = std::read(&this->allocations, this->nextAllocationAvailable);
143 
144     // If we are at nullptr already, just return current location
145     if (ptr == nullptr)
146         return this->nextAllocationAvailable;
147 
148     // Check +1, since chances are next pointer is free
149     // Careful not to cause overflow
150     if (this->nextAllocationAvailable + 1 < this->allocations\&.dataSize)
151     {
152         // Read pointer
153         ptr = std::read(&this->allocations, this->nextAllocationAvailable + 1);
154         
155         // If null, return\&.
156         if (ptr == nullptr)
157             return this->nextAllocationAvailable + 1;
158     }
159 
160     // Here and Here + 1 are not free\&. Just search entire page\&.
161     for (std::index_t idx = 0; idx < this->allocations\&.dataSize; idx++)
162     {
163         // Read one pointer
164         ptr = __UNSAFE__(std::read)(&this->allocations, idx);
165         
166         // If pointer is not free, skip
167         if (ptr)
168             continue;
169 
170         // Return idx
171         return idx; 
172     }
173 
174     // Nothing found at all\&. Return invalid pointer
175     return this->invalidAllocationIndex;
176 }
.fi
.PP
References __UNSAFE__, and BBP::std::read()\&.
.SS "\fBBBP::std::index_t\fP BBP::std::ResourceManager::find_next_empty_object ()\fC [private]\fP"

.PP
Definition at line 178 of file Resources\&.cpp\&.
.PP
.nf
179 {
180     // Declare ptr
181     void *ptr = nullptr;
182 
183     // Check if pointer exists
184     if (this->objects\&.data[this->nextObjectAvailable])
185     {
186         // Check if we are not already at free pointer
187         ptr = std::read(&this->objects, this->nextObjectAvailable)->getRawPtr();
188 
189         // If we are at nullptr already, just return current location
190         if (ptr == nullptr)
191             return this->nextObjectAvailable;
192     }
193     else
194     {
195         // Since th object at this index is apparently empty, return this index
196         return this->nextObjectAvailable;
197     }
198 
199     // Check +1, since chances are next pointer is free
200     // Careful not to cause overflow
201     if (this->nextObjectAvailable + 1 < this->objects\&.dataSize)
202     {
203         // Check if pointer exists
204         if (this->objects\&.data[this->nextAllocationAvailable + 1] == nullptr)
205             // Since th object at this index is apparently empty, return this index
206             return this->nextObjectAvailable + 1;
207     }
208 
209     // Here and Here + 1 are not free\&. Just search entire page\&.
210     for (std::index_t idx = 0; idx < this->objects\&.dataSize; idx++)
211     {
212         // Check if pointer exists\&. If not, this object is empty, so return this index
213         if (!this->objects\&.data[idx])
214             return idx;
215 
216         // Read one pointer
217         ptr = __UNSAFE__(std::read)(&this->objects, idx)->getRawPtr();
218 
219         // If pointer is not free, skip
220         if (ptr)
221             continue;
222 
223         // Return idx
224         return idx;
225     }
226 
227     // Nothing found at all\&. Return invalid pointer
228     return this->invalidObjectIndex;
229 }
.fi
.PP
References __UNSAFE__, and BBP::std::read()\&.
.PP
Referenced by add_object()\&.
.SS "\fBBBP::std::index_t\fP BBP::std::ResourceManager::find_Object_pointer (void * ptr)\fC [private]\fP"

.PP
Definition at line 248 of file Resources\&.cpp\&.
.PP
.nf
249 {
250     // Loop over every pointer
251     for (std::index_t idx = 0; idx < objects\&.dataSize; idx++)
252     {
253         // Check if pointer exists
254         if (!this->objects\&.data[idx])
255             continue;
256 
257         // Read value stored at 'idx'
258         void *stored = __UNSAFE__(std::read)(&objects, idx)->getRawPtr();
259 
260         // If 'stored' and 'ptr' are equal, return idx
261         if (stored == ptr)
262             return idx;
263     }
264 
265     // Nothing found, return invalid pointer
266     return invalidObjectIndex;
267 }
.fi
.PP
References __UNSAFE__, and BBP::std::read()\&.
.SS "void BBP::std::ResourceManager::free (void * ptr)"

.PP
Definition at line 57 of file Resources\&.cpp\&.
.PP
.nf
58 {
59     // Check if pointer is not actually nullptr
60     if (ptr == nullptr)
61     {
62         // Attempting to free nullptr: Do nothing but output something to stderr
63         std::STDERR << "Attempt to free nullptr was made\&." <<= std::endl;
64         return;
65     }
66 
67     // Attempt to find index of pointer
68     std::index_t ptrIndex = find_Alloc_pointer(ptr);
69 
70     // Call to internal free function
71     this->free(ptr, ptrIndex);
72 }
.fi
.PP
References BBP::std::endl, and BBP::std::STDERR\&.
.PP
Referenced by BBP::badapple_main(), BBP::std::FILE::close(), BBP::std::Stack< BBP::std::DIRECTORY >::Extend(), BBP::std::fprintf(), BBP::std::R2D::GetFontFromFile(), BBP::std::R2D::newWindow(), and BBP::shell()\&.
.SS "void BBP::std::ResourceManager::free (void * ptr, \fBstd::index_t\fP ptrIndex)\fC [private]\fP"

.PP
Definition at line 74 of file Resources\&.cpp\&.
.PP
.nf
75 {
76     // If index invalid, throw sigsegv signal
77     if (ptrIndex == this->invalidAllocationIndex)
78     {
79         __SIGNAL__(SIGSEGV);
80     }
81 
82     // Pointer exists, so free it\&.
83     std::ext_free(ptr);
84 
85     // Then also write nullptr to index
86     this->allocations\&.data[ptrIndex] = (void *)0;
87     //__UNSAFE__(std::write)(&this->allocations, nul, ptrIndex);
88 }
.fi
.PP
References __SIGNAL__, BBP::std::ext_free(), and BBP::std::SIGSEGV\&.
.SS "\fBBBP::std::index_t\fP BBP::std::ResourceManager::freeAll ()"

.PP
Definition at line 269 of file Resources\&.cpp\&.
.PP
.nf
270 {
271     // Keep track of objects that were free'd
272     std::index_t freeCount = 0;
273 
274     // Loop over each pointer
275     for (std::index_t idx = 0; idx < allocations\&.dataSize; idx++)
276     {
277         // Read pointer
278         void *ptr = __UNSAFE__(std::read)(&allocations, idx);
279 
280         // If ptr is nullptr, skip
281         if (ptr == nullptr)
282             continue;
283 
284         // Since this pointer has something, free it\&. Also, since we know the index, just pass it\&.
285         this->free(ptr, idx);
286         freeCount++;
287     }
288 
289     // Return the amount of things free'd
290     return freeCount;
291 }
.fi
.PP
References __UNSAFE__, and BBP::std::read()\&.
.PP
Referenced by BBP::std::execute()\&.
.SS "void * BBP::std::ResourceManager::malloc (\fBstd::size_t\fP size)"

.PP
Definition at line 8 of file Resources\&.cpp\&.
.PP
.nf
9 {
10     // See if allocation is possible
11     if (this->nextAllocationAvailable == this->invalidAllocationIndex)
12         throw std::exception("Could not allocate bytes to Resource manager: Out of allocation space\&.", ENOMEM);
13 
14     // Actually malloc data
15     void *data = std::ext_malloc(size);
16     this->totalAllocations += size;
17     //std::printf("(%p) Application allocated %u bytes during runtime\&. (malloc: %u)\n", this, this->totalAllocations, size);
18 
19     // Add that data
20     add_alloc(data);
21 
22     // Return data
23     return data;
24 }
.fi
.PP
References add_alloc(), ENOMEM, BBP::std::exception(), BBP::std::ext_malloc(), invalidAllocationIndex, nextAllocationAvailable, and totalAllocations\&.
.SS "void BBP::std::ResourceManager::mark_deleted (void * ptr)"

.PP
Definition at line 90 of file Resources\&.cpp\&.
.PP
.nf
91 {
92     // Check if pointer is not actually nullptr
93     if (ptr == nullptr)
94     {
95         // Attempting to free nullptr: Do nothing but output something to stderr
96         std::STDERR << "Attempt to delete nullptr was made\&." <<= std::endl;
97         return;
98     }
99 
100     // Attempt to find index of pointer
101     std::index_t ptrIndex = find_Object_pointer(ptr);
102 
103     // Write nullptr to index
104     delete(this->objects\&.data[ptrIndex]);
105     this->objects\&.data[ptrIndex] = nullptr;
106 }
.fi
.PP
References BBP::std::endl, and BBP::std::STDERR\&.
.SH "Field Documentation"
.PP 
.SS "\fBstd::STATIC_PAGE\fP<void *, \fBmax_allocations\fP> BBP::std::ResourceManager::allocations\fC [private]\fP"

.PP
Definition at line 110 of file Resources\&.h\&.
.SS "\fBstd::index_t\fP BBP::std::ResourceManager::invalidAllocationIndex\fC [private]\fP"

.PP
Definition at line 108 of file Resources\&.h\&.
.PP
Referenced by malloc()\&.
.SS "\fBstd::index_t\fP BBP::std::ResourceManager::invalidObjectIndex\fC [private]\fP"

.PP
Definition at line 113 of file Resources\&.h\&.
.PP
Referenced by add_object()\&.
.SS "\fBstd::index_t\fP BBP::std::ResourceManager::nextAllocationAvailable\fC [private]\fP"

.PP
Definition at line 109 of file Resources\&.h\&.
.PP
Referenced by malloc()\&.
.SS "\fBstd::index_t\fP BBP::std::ResourceManager::nextObjectAvailable\fC [private]\fP"

.PP
Definition at line 114 of file Resources\&.h\&.
.PP
Referenced by add_object()\&.
.SS "\fBstd::STATIC_PAGE\fP<\fBAbstractGCEntry\fP *, \fBmax_objects\fP> BBP::std::ResourceManager::objects\fC [private]\fP"

.PP
Definition at line 115 of file Resources\&.h\&.
.PP
Referenced by add_object()\&.
.SS "\fBstd::size_t\fP BBP::std::ResourceManager::totalAllocations = 0"

.PP
Definition at line 59 of file Resources\&.h\&.
.PP
Referenced by add_object(), and malloc()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for BBP Embedded kernel from the source code\&.
