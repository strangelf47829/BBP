.TH "BBP::std::ELF::SectionBuilder" 3 "Fri Jan 26 2024" "Version 0.2.0" "BBP Embedded kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BBP::std::ELF::SectionBuilder
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ELF\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBstd::word\fP \fBname\fP (void)"
.br
.ti -1c
.RI "void \fBname\fP (\fBstd::word\fP)"
.br
.ti -1c
.RI "\fBstd::word\fP \fBtype\fP (void)"
.br
.ti -1c
.RI "void \fBtype\fP (\fBstd::word\fP)"
.br
.ti -1c
.RI "\fBstd::word\fP \fBflags\fP (void)"
.br
.ti -1c
.RI "void \fBflags\fP (\fBstd::word\fP)"
.br
.ti -1c
.RI "\fBstd::address_t\fP \fBaddr\fP (void)"
.br
.ti -1c
.RI "void \fBaddr\fP (\fBstd::address_t\fP)"
.br
.ti -1c
.RI "\fBstd::offset_t\fP \fBoffset\fP (void)"
.br
.ti -1c
.RI "void \fBoffset\fP (\fBstd::offset_t\fP)"
.br
.ti -1c
.RI "\fBstd::word\fP \fBsize\fP (void)"
.br
.ti -1c
.RI "void \fBsize\fP (\fBstd::word\fP)"
.br
.ti -1c
.RI "\fBstd::word\fP \fBlink\fP (void)"
.br
.ti -1c
.RI "void \fBlink\fP (\fBstd::word\fP)"
.br
.ti -1c
.RI "\fBstd::word\fP \fBinfo\fP (void)"
.br
.ti -1c
.RI "void \fBinfo\fP (\fBstd::word\fP)"
.br
.ti -1c
.RI "\fBstd::word\fP \fBaddralign\fP (void)"
.br
.ti -1c
.RI "void \fBaddralign\fP (\fBstd::word\fP)"
.br
.ti -1c
.RI "\fBstd::word\fP \fBentsize\fP (void)"
.br
.ti -1c
.RI "void \fBentsize\fP (\fBstd::word\fP)"
.br
.ti -1c
.RI "void \fBAppend\fP (\fBstd::size_t\fP)"
.br
.ti -1c
.RI "void \fBExtend\fP (\fBstd::size_t\fP)"
.br
.ti -1c
.RI "void \fBclose\fP ()"
.br
.ti -1c
.RI "\fBSectionBuilder\fP (\fBELFBuilder\fP *, \fBstd::offset_t\fP)"
.br
.ti -1c
.RI "\fBSectionBuilder\fP (\fBELFBuilder\fP *, \fBstring_element\fP *, \fBstd::size_t\fP)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBPAGE\fP< \fBstring_element\fP > \fBheader\fP"
.br
.ti -1c
.RI "\fBStack\fP< \fBstring_element\fP > \fBstack\fP"
.br
.ti -1c
.RI "\fBPAGE\fP< \fBstring_element\fP > \fBdata\fP"
.br
.ti -1c
.RI "\fBELFBuilder\fP * \fBelf\fP"
.br
.ti -1c
.RI "bool \fBisMemUnique\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 199 of file ELF\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BBP::std::ELF::SectionBuilder::SectionBuilder (\fBELFBuilder\fP * elf, \fBstd::offset_t\fP offset)"

.PP
Definition at line 37 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
38     : header(PAGE<string_element>(ELF_SEGMENT_HEADERSIZE, elf->file\&.data + offset)),
39     stack(&data, 0),
40     data(PAGE<string_element>()),
41     elf(elf),
42     isMemUnique(false) {}
.fi
.SS "BBP::std::ELF::SectionBuilder::SectionBuilder (\fBELFBuilder\fP *, \fBstring_element\fP *, \fBstd::size_t\fP)"

.SH "Member Function Documentation"
.PP 
.SS "void BBP::std::ELF::SectionBuilder::addr (\fBstd::address_t\fP value)"

.PP
Definition at line 54 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
54 { writeWord(this, value, ELF_SECTION_ADDROFFSET); }
.fi
.PP
References ELF_SECTION_ADDROFFSET, and writeWord()\&.
.SS "\fBBBP::std::address_t\fP BBP::std::ELF::SectionBuilder::addr (void)"

.PP
Definition at line 53 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
53 { return readWord(this, ELF_SECTION_ADDROFFSET); }
.fi
.PP
References ELF_SECTION_ADDROFFSET, and readWord()\&.
.SS "void BBP::std::ELF::SectionBuilder::addralign (\fBstd::word\fP value)"

.PP
Definition at line 69 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
69 { writeWord(this, value, ELF_SECTION_ADDRALIGNOFFSET); }
.fi
.PP
References ELF_SECTION_ADDRALIGNOFFSET, and writeWord()\&.
.SS "\fBBBP::std::word\fP BBP::std::ELF::SectionBuilder::addralign (void)"

.PP
Definition at line 68 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
68 { return readWord(this, ELF_SECTION_ADDRALIGNOFFSET); }
.fi
.PP
References ELF_SECTION_ADDRALIGNOFFSET, and readWord()\&.
.SS "void BBP::std::ELF::SectionBuilder::Append (\fBstd::size_t\fP size)"

.PP
Definition at line 3 of file SectionBuilder\&.cpp\&.
.PP
.nf
4 {
5     // If size is 0, do nothing
6     if (size == 0)
7         return;
8 
9     // If builder is null, signal SIGSEV
10     if (elf == nullptr)
11     {
12         __SIGNAL__(SIGSEGV);
13     }
14 
15     // Do not overwrite old data\&. if old data exists, throw error
16     if (data\&.dataSize)
17         throw std::exception("Data overwrite attempt\&.", EALREADY);
18 
19     // Get current length of elf page
20     std::size_t currentLength = std::seqlen(elf->file);
21 
22     // Save offset and size to header
23     offset(currentLength);
24     this->size(size);
25 
26     // Now create a new page
27     data = std::string(size, (std::string_element *)elf->allocator->calloc(size, sizeof(std::string_element)));
28     isMemUnique = true;
29 
30     // Then set the stack to that page
31     stack = std::Stack<string_element>(&data, size);
32 
33     // Then append the data
34     std::last(elf->file)\&.nextPage = &data;
35 }
.fi
.PP
References __SIGNAL__, BBP::std::ELF::ELFBuilder::allocator, BBP::std::ResourceManager::calloc(), data, BBP::std::PAGE< T >::dataSize, EALREADY, elf, BBP::std::exception(), BBP::std::ELF::ELFBuilder::file, isMemUnique, BBP::std::last(), offset(), BBP::std::seqlen(), BBP::std::SIGSEGV, size(), and stack\&.
.SS "void BBP::std::ELF::SectionBuilder::close ()"

.PP
Definition at line 59 of file SectionBuilder\&.cpp\&.
.PP
.nf
60 {
61     // If builder is null, signal SIGSEV
62     if (elf == nullptr)
63     {
64         __SIGNAL__(SIGSEGV);
65     }
66 
67     // If mem is unique, free it\&.
68     if (isMemUnique)
69         elf->allocator->free(data\&.data);
70 }
.fi
.PP
References __SIGNAL__, and BBP::std::SIGSEGV\&.
.PP
Referenced by BBP::std::ELF::ELFBuilder::close()\&.
.SS "void BBP::std::ELF::SectionBuilder::entsize (\fBstd::word\fP value)"

.PP
Definition at line 72 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
72 { writeWord(this, value, ELF_SECTION_ENTSIZEOFFSET); }
.fi
.PP
References ELF_SECTION_ENTSIZEOFFSET, and writeWord()\&.
.SS "\fBBBP::std::word\fP BBP::std::ELF::SectionBuilder::entsize (void)"

.PP
Definition at line 71 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
71 { return readWord(this, ELF_SECTION_ENTSIZEOFFSET); }
.fi
.PP
References ELF_SECTION_ENTSIZEOFFSET, and readWord()\&.
.PP
Referenced by BBP::std::ELF::ELFBuilder::ELFBuilder()\&.
.SS "void BBP::std::ELF::SectionBuilder::Extend (\fBstd::size_t\fP size)"

.PP
Definition at line 37 of file SectionBuilder\&.cpp\&.
.PP
.nf
38 {
39     // If builder is null, signal SIGSEV
40     if (elf == nullptr)
41     {
42         __SIGNAL__(SIGSEGV);
43     }
44 
45     // Can only extend old data, so if data does not exist, throw error\&.
46     if (!data\&.dataSize)
47         throw std::exception("Attempt to extend empty data\&.", EADDRNOTAVAIL);
48 
49     stack\&.Extend(elf->allocator, size);
50 
51     // Then update the size variable in this header
52     this->size(this->size() + size);
53 
54     // Then recalculate offsets only for sections and headers after this one
55     elf->recalculateOffsets(offset(), size);
56 
57 }
.fi
.PP
References __SIGNAL__, EADDRNOTAVAIL, BBP::std::exception(), and BBP::std::SIGSEGV\&.
.SS "void BBP::std::ELF::SectionBuilder::flags (\fBstd::word\fP value)"

.PP
Definition at line 51 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
51 { writeWord(this, value, ELF_SECTION_FLAGSOFFSET); }
.fi
.PP
References ELF_SECTION_FLAGSOFFSET, and writeWord()\&.
.SS "\fBBBP::std::word\fP BBP::std::ELF::SectionBuilder::flags (void)"

.PP
Definition at line 50 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
50 { return readWord(this, ELF_SECTION_FLAGSOFFSET); }
.fi
.PP
References ELF_SECTION_FLAGSOFFSET, and readWord()\&.
.SS "void BBP::std::ELF::SectionBuilder::info (\fBstd::word\fP value)"

.PP
Definition at line 66 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
66 { writeWord(this, value, ELF_SECTION_INFOOFFSET); }
.fi
.PP
References ELF_SECTION_INFOOFFSET, and writeWord()\&.
.SS "\fBBBP::std::word\fP BBP::std::ELF::SectionBuilder::info (void)"

.PP
Definition at line 65 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
65 { return readWord(this, ELF_SECTION_INFOOFFSET); }
.fi
.PP
References ELF_SECTION_INFOOFFSET, and readWord()\&.
.SS "void BBP::std::ELF::SectionBuilder::link (\fBstd::word\fP value)"

.PP
Definition at line 63 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
63 { writeWord(this, value, ELF_SECTION_LINKOFFSET); }
.fi
.PP
References ELF_SECTION_LINKOFFSET, and writeWord()\&.
.SS "\fBBBP::std::word\fP BBP::std::ELF::SectionBuilder::link (void)"

.PP
Definition at line 62 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
62 { return readWord(this, ELF_SECTION_LINKOFFSET); }
.fi
.PP
References ELF_SECTION_LINKOFFSET, and readWord()\&.
.PP
Referenced by BBP::std::ELF::ELFBuilder::ELFBuilder()\&.
.SS "void BBP::std::ELF::SectionBuilder::name (\fBstd::word\fP value)"

.PP
Definition at line 45 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
45 { writeWord(this, value, ELF_SECTION_NAMEOFFSET); }
.fi
.PP
References ELF_SECTION_NAMEOFFSET, and writeWord()\&.
.SS "\fBBBP::std::word\fP BBP::std::ELF::SectionBuilder::name (void)"

.PP
Definition at line 44 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
44 { return readWord(this, ELF_SECTION_NAMEOFFSET); }
.fi
.PP
References ELF_SECTION_NAMEOFFSET, and readWord()\&.
.SS "void BBP::std::ELF::SectionBuilder::offset (\fBstd::offset_t\fP value)"

.PP
Definition at line 57 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
57 { writeWord(this, value, ELF_SECTION_OFFSETOFFSET); }
.fi
.PP
References ELF_SECTION_OFFSETOFFSET, and writeWord()\&.
.SS "\fBBBP::std::offset_t\fP BBP::std::ELF::SectionBuilder::offset (void)"

.PP
Definition at line 56 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
56 { return readWord(this, ELF_SECTION_OFFSETOFFSET); }
.fi
.PP
References ELF_SECTION_OFFSETOFFSET, and readWord()\&.
.PP
Referenced by Append(), and BBP::smile_main()\&.
.SS "void BBP::std::ELF::SectionBuilder::size (\fBstd::word\fP value)"

.PP
Definition at line 60 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
60 { writeWord(this, value, ELF_SECTION_SIZEOFFSET); }
.fi
.PP
References ELF_SECTION_SIZEOFFSET, and writeWord()\&.
.SS "\fBBBP::std::word\fP BBP::std::ELF::SectionBuilder::size (void)"

.PP
Definition at line 59 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
59 { return readWord(this, ELF_SECTION_SIZEOFFSET); }
.fi
.PP
References ELF_SECTION_SIZEOFFSET, and readWord()\&.
.PP
Referenced by Append(), and BBP::std::ELF::ELFBuilder::ELFBuilder()\&.
.SS "void BBP::std::ELF::SectionBuilder::type (\fBstd::word\fP value)"

.PP
Definition at line 48 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
48 { writeWord(this, value, ELF_SECTION_TYPEOFFSET); }
.fi
.PP
References ELF_SECTION_TYPEOFFSET, and writeWord()\&.
.SS "\fBBBP::std::word\fP BBP::std::ELF::SectionBuilder::type (void)"

.PP
Definition at line 47 of file SectionBuilderGettersSetters\&.cpp\&.
.PP
.nf
47 { return readWord(this, ELF_SECTION_TYPEOFFSET); }
.fi
.PP
References ELF_SECTION_TYPEOFFSET, and readWord()\&.
.SH "Field Documentation"
.PP 
.SS "\fBPAGE\fP<\fBstring_element\fP> BBP::std::ELF::SectionBuilder::data"

.PP
Definition at line 235 of file ELF\&.h\&.
.PP
Referenced by Append()\&.
.SS "\fBELFBuilder\fP* BBP::std::ELF::SectionBuilder::elf"

.PP
Definition at line 242 of file ELF\&.h\&.
.PP
Referenced by Append(), readWord(), and writeWord()\&.
.SS "\fBPAGE\fP<\fBstring_element\fP> BBP::std::ELF::SectionBuilder::header"

.PP
Definition at line 233 of file ELF\&.h\&.
.PP
Referenced by readWord(), and writeWord()\&.
.SS "bool BBP::std::ELF::SectionBuilder::isMemUnique"

.PP
Definition at line 243 of file ELF\&.h\&.
.PP
Referenced by Append()\&.
.SS "\fBStack\fP<\fBstring_element\fP> BBP::std::ELF::SectionBuilder::stack"

.PP
Definition at line 234 of file ELF\&.h\&.
.PP
Referenced by BBP::esa::ACTION(), Append(), and BBP::esa::esaProcessor::setProcedureAddress()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for BBP Embedded kernel from the source code\&.
