#ifndef BBP_STDLIB_FILESYS_H
#define BBP_STDLIB_FILESYS_H

#include "Strings.h"
#include "Resources.h"

namespace BBP
{
	namespace std
	{

		// Nodes that stores the actual data. (See INode)
		struct FileNode;
		struct DirectoryNode;

		// What the "user" uses
		class VOLUME;
		class DIRECTORY;
		class FILE;

		// This is ...
		typedef std::index_t noderef_t;
		extern std::STATIC_PAGE<FileNode> fileNodes;
		extern std::STATIC_PAGE<DirectoryNode> directoryNodes;

		// Paths
		class PATH
		{
		public:

			std::c_string pathName();
			std::c_string fileName();

			std::c_string relName();

			bool isRelativeToRoot();

			PATH absolutePath(PATH *dir);
			PATH &sanitize();

			PATH(VOLUME *, std::string path);
			PATH(VOLUME *, std::conststring path);

			~PATH();



		private:

			// The string where the path + filename lives
			std::string _path;

			// Pretty much a copy of the input path string
			std::string rawPath;
			
			// This index stores where the file name begins
			std::index_t fileNameStartIndex;

			// This is where _path is allocated
			std::ResourceManager *allocator;

			// The volume which this path is relative to
			VOLUME *relativeTo;

			/*
			*  Data input:
			* /mnt/v/someFile.txt
			* 
			* _path data:
			* /mnt/v(NULL)someFile.txt(NULL)
			*        ^^^^ <- fileNameStartIndex
			* 
			* 
			*/

		};


		
		
		class VOLUME
		{
		public:
			VOLUME(char l, std::conststring);
			VOLUME(char l) : VOLUME(l, "/") {}

			PATH volumePath;
			char label;

		};


		class FILE
		{
		public:

		private:
			noderef_t node;
			FileNode *getFile();
		};

		class DIRECTORY
		{
		public:

		private:
			noderef_t node;
			DirectoryNode *getNode();
		};



		struct FileNode
		{
			// The internal data of the file
			std::ResourceManager *allocator;
			std::PAGE<std::mem_t> fileData;
		};

		struct DirectoryNode
		{
			// The volume this directory is in
			VOLUME *volume;

			// The path of this directory
			PATH path;

			// Relationships between this and other directories
			DIRECTORY *parent;
			std::Stack<DIRECTORY> subDirectories;

			// Files stored in this directory
			std::Stack<FILE> files;
		};

	}
}


#endif
